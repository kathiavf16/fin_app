[{"/Users/kathiavargas/Desktop/dataStudio/my_app/src/index.js":"1","/Users/kathiavargas/Desktop/dataStudio/my_app/src/App.js":"2","/Users/kathiavargas/Desktop/dataStudio/my_app/src/serviceWorker.js":"3","/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/BarChartCus.js":"4","/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/Linechart.js":"5","/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/MapChart.js":"6","/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/Section.js":"7","/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/Navbar.js":"8","/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/Card.js":"9","/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/Dropdown.js":"10","/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/Piech.js":"11","/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/CustomBar.js":"12","/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/CustomBar2.js":"13"},{"size":451,"mtime":1540426084000,"results":"14","hashOfConfig":"15"},{"size":10713,"mtime":1607611419379,"results":"16","hashOfConfig":"15"},{"size":4812,"mtime":1540426084000,"results":"17","hashOfConfig":"15"},{"size":794,"mtime":1607621193505,"results":"18","hashOfConfig":"15"},{"size":1222,"mtime":1607391334628,"results":"19","hashOfConfig":"15"},{"size":4445,"mtime":1607468459796,"results":"20","hashOfConfig":"15"},{"size":1270,"mtime":1607620672195,"results":"21","hashOfConfig":"15"},{"size":2577,"mtime":1607621036056,"results":"22","hashOfConfig":"15"},{"size":206,"mtime":1606489196801,"results":"23","hashOfConfig":"15"},{"size":3169,"mtime":1606602614465,"results":"24","hashOfConfig":"15"},{"size":1305,"mtime":1607184907338,"results":"25","hashOfConfig":"15"},{"size":1874,"mtime":1607435744646,"results":"26","hashOfConfig":"15"},{"size":1874,"mtime":1607279192723,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1iefxsn",{"filePath":"30","messages":"31","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},"/Users/kathiavargas/Desktop/dataStudio/my_app/src/index.js",[],"/Users/kathiavargas/Desktop/dataStudio/my_app/src/App.js",["59","60","61","62","63","64","65","66","67","68","69"],"/Users/kathiavargas/Desktop/dataStudio/my_app/src/serviceWorker.js",[],"/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/BarChartCus.js",["70"],"/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/Linechart.js",[],["71","72"],"/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/MapChart.js",["73","74","75"],"import React, {memo} from \"react\";\nimport { scaleQuantize } from \"d3-scale\";\nimport { geoCentroid } from \"d3-geo\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Annotation\n} from \"react-simple-maps\";\n\nimport allStates from \"../Data/statesk.json\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n//const [content, setContent] = useState(\"\");\n\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\n\nconst colorScale = scaleQuantize()\n  .domain([1, 10])\n  .range([\n    \"#ffedea\",\n    \"#ffcec5\",\n    \"#ffad9f\",\n    \"#ff8a75\",\n    \"#ff5533\",\n    \"#e2492d\",\n    \"#be3d26\",\n    \"#9a311f\",\n    \"#782618\"\n  ]);\n\nconst MapChart = ({ setTooltipContent, setState, setRegion, colorScale, setStock, setIncome1, setIncome99, setGrade, setCoefficient}) => {\n  return (\n    <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\n      <Geographies geography={geoUrl}>\n        {({ geographies }) => (\n          <>\n            {geographies.map(geo => (\n\n              <Geography\n                key={geo.rsmKey}\n                stroke=\"#FFF\"\n                geography={geo}\n                fill={() => {\n                  const curs = allStates.find(s => s.val === geo.id);\n                  console.log(\"color:\", curs, geo.properties)\n                  colorScale(curs ? curs.val : \"#EEE\")}}\n                onClick={() => {\n                    const { name } = geo.properties;\n                    const curs = allStates.find(s => s.val === geo.id);\n                    console.log(\"prop:\", curs, geo.properties)\n                    setState(`${(curs.state)}`) //filtered value\n                    setRegion(`${(curs.division)}`)\n                    setStock(`${(curs.division)}`)\n                    setIncome1(`${(curs.Average_income_of_the_top_1)}`)\n                    setIncome99(`${(curs.Average_income_of_the_bottom_99)}`)\n                    setGrade(`${(curs.grade)}`)\n                    setCoefficient(`${(curs.top_bottom_ratio)}`)\n                    console.log(\"state\", curs.grade, geo.properties, curs.Average_income_of_the_top_1)\n                  }}\n                  onMouseEnter={() => {\n                    const { name } = geo.properties;\n                    const curs = allStates.find(s => s.val === geo.id);\n                    console.log(\"prop:\", curs, geo.properties)\n                    setTooltipContent(`${curs.grade} - ${(curs.state)}`); //tooltip variable\n                    console.log(\"state\", curs.grade, geo.properties)\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                  style={{\n                    default: {\n                      fill: \"#d8ac9c\",\n                      outline: \"none\"\n                    },\n                    hover: {\n                      fill: \"#F53\",\n                      outline: \"none\"\n                    },\n                    pressed: {\n                      fill: \"#E42\",\n                      outline: \"none\"\n                    }\n                  }}\n                />\n              ))\n            }\n              />\n            ))}\n            {geographies.map(geo => {\n              const centroid = geoCentroid(geo);\n              const cur = allStates.find(s => s.val === geo.id);\n              return (\n                <g key={geo.rsmKey + \"-name\"}>\n                  {cur &&\n                    centroid[0] > -160 &&\n                    centroid[0] < -67 &&\n                    (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                      <Marker coordinates={centroid}>\n                        <text y=\"2\" fontSize={14} textAnchor=\"middle\">\n                          {cur.id}\n                        </text>\n\n                      </Marker>\n                    ) : (\n                      <Annotation\n                        subject={centroid}\n                        dx={offsets[cur.id][0]}\n                        dy={offsets[cur.id][1]}\n                      >\n                        <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                          {cur.id}\n                        </text>\n                      </Annotation>\n                    ))}\n                </g>\n              );\n            })}\n          </>\n        )}\n      </Geographies>\n    </ComposableMap>\n  );\n};\n\nexport default memo(MapChart);\n","/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/Section.js",[],"/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/Navbar.js",[],"/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/Card.js",[],"/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/Dropdown.js",[],"/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/Piech.js",["76","77"],"import React, { PureComponent } from 'react';\nimport {\n  PieChart, Pie, Sector, Cell,\n} from 'recharts';\n\n\n// stocks from \"../Data/stock_region.json\";\n\n// const data = [\n//   { stock: 'Yes', value: 1500 },\n//\n//   { stock: 'No', value: 500 },\n//\n// ];\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = ({\n  cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n}) => {\n   const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\n\n\nexport default function Piech({data}) {\n\n    return (\n      <PieChart width={400} height={400}>\n        <Pie\n          data={data}\n          cx={200}\n          cy={200}\n          labelLine={false}\n          label={renderCustomizedLabel}\n          outerRadius={80}\n          fill=\"#8884d8\"\n          dataKey=\"VALUE\"\n\n        >\n          {\n            data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\n          }\n        </Pie>\n      </PieChart>\n    );\n  }\n","/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/CustomBar.js",["78"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n} from 'recharts';\nimport { scaleOrdinal } from 'd3-scale';\nimport { schemeGreens } from 'd3-scale-chromatic';\nimport datas from \"../Data/topstates.json\";\nconst colors = scaleOrdinal(schemeGreens[5]).range();\n\nconst filteredata = datas.filter(index => index.livingindex <= 0.889)\nconsole.log(\"top\",filteredata)\n\nconst getPath = (x, y, width, height) => `M${x},${y + height}\n          C${x + width / 3},${y + height} ${x + width / 2},${y + height / 3} ${x + width / 2}, ${y}\n          C${x + width / 2},${y + height / 3} ${x + 2 * width / 3},${y + height} ${x + width}, ${y + height}\n          Z`;\n\nconst TriangleBar = (props) => {\n  const {\n    fill, x, y, width, height,\n  } = props;\n\n  return <path d={getPath(x, y, width, height)} stroke=\"none\" fill={fill} />;\n};\n\nTriangleBar.propTypes = {\n  fill: PropTypes.string,\n  x: PropTypes.number,\n  y: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n};\n\n\nexport default function CustomBar (){\n\n    return (\n    <div style={{ width: '100%', height: 300 }}>\n    <ResponsiveContainer>\n      <BarChart\n        width={400}\n        height={300}\n        data={filteredata}\n        margin={{\n          top: 20, right: 30, left: 20, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"abbr\" angle={0} />\n        <YAxis />\n        <Tooltip />\n        <Bar dataKey=\"Yearly Expenses +65yo\" fill=\"#58b368\" shape={<TriangleBar />} label={{ position: 'top' }}>\n          {\n            filteredata.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={colors[index % 10]} />\n            ))\n          }\n        </Bar>\n      </BarChart>\n      </ResponsiveContainer>\n      </div>\n\n    );\n  }\n","/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/CustomBar2.js",["79"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,ResponsiveContainer,\n} from 'recharts';\nimport { scaleOrdinal } from 'd3-scale';\nimport { schemeOranges} from 'd3-scale-chromatic';\nimport datas from \"../Data/topstates.json\";\nconst colors = scaleOrdinal(schemeOranges[5]).range();\n\nconst filteredata = datas.filter(index => index.livingindex >= 1.342 &&  index.livingindex < 100)\nconsole.log(\"top\",filteredata)\n\nconst getPath = (x, y, width, height) => `M${x},${y + height}\n          C${x + width / 3},${y + height} ${x + width / 2},${y + height / 3} ${x + width / 2}, ${y}\n          C${x + width / 2},${y + height / 3} ${x + 2 * width / 3},${y + height} ${x + width}, ${y + height}\n          Z`;\n\nconst TriangleBar = (props) => {\n  const {\n    fill, x, y, width, height,\n  } = props;\n\n  return <path d={getPath(x, y, width, height)} stroke=\"none\" fill={fill} />;\n};\n\nTriangleBar.propTypes = {\n  fill: PropTypes.string,\n  x: PropTypes.number,\n  y: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n};\n\n\nexport default function CustomBar (){\n\n    return (\n      <div style={{ width: '100%', height: 300 }}>\n      <ResponsiveContainer>\n      <BarChart\n        width={400}\n        height={300}\n        data={filteredata}\n        margin={{\n          top: 20, right: 30, left: 20, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"abbr\" angle={0} />\n        <YAxis />\n        <Tooltip />\n        <Bar dataKey=\"Yearly Expenses +65yo\" fill=\"red\" shape={<TriangleBar />}>\n          {\n            filteredata.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={colors[index % 10]} />\n            ))\n          }\n        </Bar>\n      </BarChart>\n      </ResponsiveContainer>\n      </div>\n\n    );\n  }\n",{"ruleId":"80","severity":1,"message":"81","line":1,"column":27,"nodeType":"82","messageId":"83","endLine":1,"endColumn":36},{"ruleId":"80","severity":1,"message":"84","line":8,"column":8,"nodeType":"82","messageId":"83","endLine":8,"endColumn":19},{"ruleId":"80","severity":1,"message":"85","line":11,"column":8,"nodeType":"82","messageId":"83","endLine":11,"endColumn":17},{"ruleId":"80","severity":1,"message":"86","line":12,"column":8,"nodeType":"82","messageId":"83","endLine":12,"endColumn":18},{"ruleId":"80","severity":1,"message":"87","line":14,"column":8,"nodeType":"82","messageId":"83","endLine":14,"endColumn":13},{"ruleId":"80","severity":1,"message":"88","line":39,"column":8,"nodeType":"82","messageId":"83","endLine":39,"endColumn":13},{"ruleId":"80","severity":1,"message":"89","line":46,"column":7,"nodeType":"82","messageId":"83","endLine":46,"endColumn":18},{"ruleId":"80","severity":1,"message":"90","line":47,"column":7,"nodeType":"82","messageId":"83","endLine":47,"endColumn":13},{"ruleId":"80","severity":1,"message":"91","line":50,"column":7,"nodeType":"82","messageId":"83","endLine":50,"endColumn":16},{"ruleId":"80","severity":1,"message":"92","line":51,"column":7,"nodeType":"82","messageId":"83","endLine":51,"endColumn":13},{"ruleId":"80","severity":1,"message":"93","line":52,"column":7,"nodeType":"82","messageId":"83","endLine":52,"endColumn":19},{"ruleId":"80","severity":1,"message":"94","line":3,"column":18,"nodeType":"82","messageId":"83","endLine":3,"endColumn":22},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"80","severity":1,"message":"99","line":29,"column":7,"nodeType":"82","messageId":"83","endLine":29,"endColumn":17},{"ruleId":"80","severity":1,"message":"100","line":60,"column":29,"nodeType":"82","messageId":"83","endLine":60,"endColumn":33},{"ruleId":"80","severity":1,"message":"100","line":73,"column":29,"nodeType":"82","messageId":"83","endLine":73,"endColumn":33},{"ruleId":"80","severity":1,"message":"101","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":30},{"ruleId":"80","severity":1,"message":"102","line":3,"column":18,"nodeType":"82","messageId":"83","endLine":3,"endColumn":24},{"ruleId":"80","severity":1,"message":"103","line":4,"column":62,"nodeType":"82","messageId":"83","endLine":4,"endColumn":68},{"ruleId":"80","severity":1,"message":"103","line":4,"column":62,"nodeType":"82","messageId":"83","endLine":4,"endColumn":68},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'stockregion' is defined but never used.","'CustomBar' is defined but never used.","'CustomBar2' is defined but never used.","'Piech' is defined but never used.","'stock' is assigned a value but never used.","'filteredata' is assigned a value but never used.","'income' is assigned a value but never used.","'incomes99' is assigned a value but never used.","'grades' is assigned a value but never used.","'coefficients' is assigned a value but never used.","'Cell' is defined but never used.","no-native-reassign",["104"],"no-negated-in-lhs",["105"],"'colorScale' is assigned a value but never used.","'name' is assigned a value but never used.","'PureComponent' is defined but never used.","'Sector' is defined but never used.","'Legend' is defined but never used.","no-global-assign","no-unsafe-negation"]