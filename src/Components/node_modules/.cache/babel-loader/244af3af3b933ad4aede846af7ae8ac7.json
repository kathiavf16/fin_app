{"ast":null,"code":"/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _dragHelper = _interopRequireDefault(require(\"../../packages/drag-helper\"));\n\nvar emptyFn = function emptyFn() {};\n\nfunction _default(_ref, _ref2, event) {\n  var region = _ref.region,\n      headerRegion = _ref.headerRegion,\n      constrainTo = _ref.constrainTo,\n      columnHeaderNodes = _ref.columnHeaderNodes,\n      columns = _ref.columns,\n      rtl = _ref.rtl,\n      index = _ref.index,\n      firstFlexIndex = _ref.firstFlexIndex,\n      shareSpace = _ref.shareSpace,\n      shareSpaceOnResize = _ref.shareSpaceOnResize,\n      initialSize = _ref.initialSize,\n      nextColumnSize = _ref.nextColumnSize,\n      extraOffset = _ref.extraOffset,\n      groupColumns = _ref.groupColumns;\n  var _ref2$onResizeDragIni = _ref2.onResizeDragInit,\n      onResizeDragInit = _ref2$onResizeDragIni === void 0 ? emptyFn : _ref2$onResizeDragIni,\n      _ref2$onResizeDragSta = _ref2.onResizeDragStart,\n      onResizeDragStart = _ref2$onResizeDragSta === void 0 ? emptyFn : _ref2$onResizeDragSta,\n      _ref2$onResizeDrag = _ref2.onResizeDrag,\n      onResizeDrag = _ref2$onResizeDrag === void 0 ? emptyFn : _ref2$onResizeDrag,\n      _ref2$onResizeDrop = _ref2.onResizeDrop,\n      onResizeDrop = _ref2$onResizeDrop === void 0 ? emptyFn : _ref2$onResizeDrop;\n  var column = columns[index];\n  var nextColumn = columns[index + 1];\n  var initialPosition = rtl ? headerRegion.right - region.right : region.left - headerRegion.left;\n\n  var isContrained = function isContrained(dragRegion) {\n    var constrained = dragRegion.left <= constrainTo.left || dragRegion.right >= constrainTo.right;\n    return constrained;\n  };\n\n  (0, _dragHelper.default)(event, {\n    constrainTo: constrainTo,\n    region: region,\n    onDragInit: onResizeDragInit.bind(this, {\n      offset: initialPosition,\n      region: region,\n      initialPosition: initialPosition,\n      constrained: isContrained(region)\n    }),\n    onDragStart: function onDragStart(e, config) {\n      var constrained = isContrained(config.dragRegion);\n      onResizeDragStart({\n        initialPosition: initialPosition,\n        offset: initialPosition,\n        constrained: constrained,\n        resizing: true,\n        region: region,\n        column: column\n      });\n    },\n    onDrag: function onDrag(e, config) {\n      var diff = config.diff.left;\n      var offset = initialPosition + (rtl ? -1 : 1) * diff;\n      var constrained = isContrained(config.dragRegion);\n      e.preventDefault();\n      onResizeDrag({\n        constrained: constrained,\n        initialPosition: initialPosition,\n        diff: diff,\n        offset: offset,\n        region: region,\n        column: column\n      });\n    },\n    onDrop: function onDrop(e, config) {\n      var diff = (rtl ? -1 : 1) * Math.round(config.diff.left);\n      var offset = initialPosition + diff;\n      var constrained = isContrained(config.dragRegion);\n      var size = initialSize + diff;\n      var doShare = shareSpace;\n      var nextColSize;\n\n      if (doShare) {\n        nextColSize = nextColumnSize - diff;\n      }\n\n      onResizeDrop({\n        index: index,\n        constrained: constrained,\n        initialPosition: initialPosition,\n        region: region,\n        diff: diff,\n        offset: offset,\n        size: size,\n        shareSpaceOnResize: shareSpaceOnResize,\n        groupColumns: groupColumns,\n        initialSize: initialSize,\n        firstFlexIndex: firstFlexIndex,\n        shareSpace: doShare,\n        column: column,\n        nextColumn: nextColumn,\n        nextColumnSize: nextColSize\n      });\n    }\n  });\n}","map":{"version":3,"sources":["/Users/kathiavargas/node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/setupColumnResize.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_default","_dragHelper","emptyFn","_ref","_ref2","event","region","headerRegion","constrainTo","columnHeaderNodes","columns","rtl","index","firstFlexIndex","shareSpace","shareSpaceOnResize","initialSize","nextColumnSize","extraOffset","groupColumns","_ref2$onResizeDragIni","onResizeDragInit","_ref2$onResizeDragSta","onResizeDragStart","_ref2$onResizeDrag","onResizeDrag","_ref2$onResizeDrop","onResizeDrop","column","nextColumn","initialPosition","right","left","isContrained","dragRegion","constrained","onDragInit","bind","offset","onDragStart","e","config","resizing","onDrag","diff","preventDefault","onDrop","Math","round","size","doShare","nextColSize"],"mappings":"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","sourcesContent":["/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _dragHelper = _interopRequireDefault(require(\"../../packages/drag-helper\"));\n\nvar emptyFn = function emptyFn() {};\n\nfunction _default(_ref, _ref2, event) {\n  var region = _ref.region,\n      headerRegion = _ref.headerRegion,\n      constrainTo = _ref.constrainTo,\n      columnHeaderNodes = _ref.columnHeaderNodes,\n      columns = _ref.columns,\n      rtl = _ref.rtl,\n      index = _ref.index,\n      firstFlexIndex = _ref.firstFlexIndex,\n      shareSpace = _ref.shareSpace,\n      shareSpaceOnResize = _ref.shareSpaceOnResize,\n      initialSize = _ref.initialSize,\n      nextColumnSize = _ref.nextColumnSize,\n      extraOffset = _ref.extraOffset,\n      groupColumns = _ref.groupColumns;\n  var _ref2$onResizeDragIni = _ref2.onResizeDragInit,\n      onResizeDragInit = _ref2$onResizeDragIni === void 0 ? emptyFn : _ref2$onResizeDragIni,\n      _ref2$onResizeDragSta = _ref2.onResizeDragStart,\n      onResizeDragStart = _ref2$onResizeDragSta === void 0 ? emptyFn : _ref2$onResizeDragSta,\n      _ref2$onResizeDrag = _ref2.onResizeDrag,\n      onResizeDrag = _ref2$onResizeDrag === void 0 ? emptyFn : _ref2$onResizeDrag,\n      _ref2$onResizeDrop = _ref2.onResizeDrop,\n      onResizeDrop = _ref2$onResizeDrop === void 0 ? emptyFn : _ref2$onResizeDrop;\n  var column = columns[index];\n  var nextColumn = columns[index + 1];\n  var initialPosition = rtl ? headerRegion.right - region.right : region.left - headerRegion.left;\n\n  var isContrained = function isContrained(dragRegion) {\n    var constrained = dragRegion.left <= constrainTo.left || dragRegion.right >= constrainTo.right;\n    return constrained;\n  };\n\n  (0, _dragHelper.default)(event, {\n    constrainTo: constrainTo,\n    region: region,\n    onDragInit: onResizeDragInit.bind(this, {\n      offset: initialPosition,\n      region: region,\n      initialPosition: initialPosition,\n      constrained: isContrained(region)\n    }),\n    onDragStart: function onDragStart(e, config) {\n      var constrained = isContrained(config.dragRegion);\n      onResizeDragStart({\n        initialPosition: initialPosition,\n        offset: initialPosition,\n        constrained: constrained,\n        resizing: true,\n        region: region,\n        column: column\n      });\n    },\n    onDrag: function onDrag(e, config) {\n      var diff = config.diff.left;\n      var offset = initialPosition + (rtl ? -1 : 1) * diff;\n      var constrained = isContrained(config.dragRegion);\n      e.preventDefault();\n      onResizeDrag({\n        constrained: constrained,\n        initialPosition: initialPosition,\n        diff: diff,\n        offset: offset,\n        region: region,\n        column: column\n      });\n    },\n    onDrop: function onDrop(e, config) {\n      var diff = (rtl ? -1 : 1) * Math.round(config.diff.left);\n      var offset = initialPosition + diff;\n      var constrained = isContrained(config.dragRegion);\n      var size = initialSize + diff;\n      var doShare = shareSpace;\n      var nextColSize;\n\n      if (doShare) {\n        nextColSize = nextColumnSize - diff;\n      }\n\n      onResizeDrop({\n        index: index,\n        constrained: constrained,\n        initialPosition: initialPosition,\n        region: region,\n        diff: diff,\n        offset: offset,\n        size: size,\n        shareSpaceOnResize: shareSpaceOnResize,\n        groupColumns: groupColumns,\n        initialSize: initialSize,\n        firstFlexIndex: firstFlexIndex,\n        shareSpace: doShare,\n        column: column,\n        nextColumn: nextColumn,\n        nextColumnSize: nextColSize\n      });\n    }\n  });\n}"]},"metadata":{},"sourceType":"script"}