{"ast":null,"code":"/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCellSelection = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _useProperty3 = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/useProperty\"));\n\nvar _batchUpdate = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/batchUpdate\"));\n\nvar _clamp = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/clamp\"));\n\nvar _useActiveCell2 = _interopRequireDefault(require(\"./useActiveCell\"));\n\nvar getFirstSelectedCell = function getFirstSelectedCell(cellSelection) {\n  return cellSelection.sort(function (cell1, cell2) {\n    if (cell1[0] < cell2[0]) {\n      return -1;\n    } else if (cell1[0] > cell2[0]) {\n      return 1;\n    }\n\n    return cell1[1] < cell2[1] ? -1 : 1;\n  })[0];\n};\n\nvar useCellSelection = function useCellSelection(props, _ref, computedPropsRef) {\n  var rowSelectionEnabled = _ref.rowSelectionEnabled,\n      hasRowNavigation = _ref.hasRowNavigation,\n      listenOnCellEnter = _ref.listenOnCellEnter;\n\n  var _useProperty = (0, _useProperty3.default)(props, 'cellSelection'),\n      _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n      cellSelection = _useProperty2[0],\n      setCellSelection = _useProperty2[1];\n\n  var _useActiveCell = (0, _useActiveCell2.default)(props, computedPropsRef),\n      computedActiveCell = _useActiveCell.computedActiveCell,\n      getCellSelectionIdKey = _useActiveCell.getCellSelectionIdKey,\n      getCellSelectionBetween = _useActiveCell.getCellSelectionBetween,\n      setActiveCell = _useActiveCell.setActiveCell,\n      getCellSelectionKey = _useActiveCell.getCellSelectionKey,\n      incrementActiveCell = _useActiveCell.incrementActiveCell;\n\n  var cellSelectionEnabled = !rowSelectionEnabled ? !!cellSelection : false;\n\n  if (rowSelectionEnabled || hasRowNavigation) {\n    computedActiveCell = undefined;\n  }\n\n  var cellNavigationEnabled = computedActiveCell !== undefined;\n\n  if (cellSelection) {\n    cellNavigationEnabled = props.enableKeyboardNavigation !== false && !hasRowNavigation ? true : computedActiveCell !== undefined || !!cellSelection;\n  }\n\n  if (props.enableKeyboardNavigation === false) {\n    cellNavigationEnabled = false;\n  }\n\n  var cellMultiSelectionEnabled = cellSelectionEnabled && props.multiSelect !== false;\n  var onCellEnter = (0, _react.useMemo)(function () {\n    return listenOnCellEnter ? function (event, _ref2) {\n      var columnIndex = _ref2.columnIndex,\n          rowIndex = _ref2.rowIndex;\n      var computedProps = computedPropsRef.current;\n\n      if (!computedProps) {\n        return;\n      }\n\n      var data = computedProps.getItemAt(rowIndex);\n\n      if (!data || data.__group) {\n        return;\n      }\n\n      var col = computedProps.getColumnBy(columnIndex);\n\n      if (col && col.cellSelectable === false) {\n        return;\n      }\n\n      var groupBy = computedProps.computedGroupBy;\n      var minCol = groupBy ? groupBy.length : 0;\n\n      if (columnIndex < minCol) {\n        return;\n      }\n\n      var range = computedProps.getCellSelectionBetween(computedProps.selectionFixedCell || computedProps.computedActiveCell || computedProps.lastSelectedCell, [rowIndex, columnIndex]);\n      var queue = (0, _batchUpdate.default)();\n      queue(function () {\n        computedProps.setCellSelection(range);\n        computedProps.setLastCellInRange(Object.keys(range).pop() || '');\n      });\n      var direction = computedProps.cellDragStartRowIndex != null ? rowIndex - computedProps.cellDragStartRowIndex : rowIndex;\n      var sign = direction < 0 ? -1 : direction > 0 ? 1 : 0;\n      var scrollToRowIndex = (0, _clamp.default)(rowIndex + sign, 0, computedProps.count - 1);\n      var visible = computedProps.isCellVisible({\n        columnIndex: columnIndex,\n        rowIndex: scrollToRowIndex\n      });\n\n      if (visible !== true) {\n        visible = visible;\n        var left = visible.leftDiff < 0;\n        var top = visible.topDiff < 0;\n        computedProps.scrollToCell({\n          columnIndex: columnIndex,\n          rowIndex: scrollToRowIndex\n        }, {\n          top: top,\n          left: left\n        });\n      }\n\n      queue.commit();\n    } : null;\n  }, [listenOnCellEnter]);\n\n  var getContinuousSelectedRangeFor = function getContinuousSelectedRangeFor(selectionMap, cell) {\n    if (!cell) {\n      return [];\n    }\n\n    selectionMap = selectionMap || {};\n\n    var _cell = (0, _slicedToArray2.default)(cell, 2),\n        row = _cell[0],\n        col = _cell[1];\n\n    var key = getCellSelectionKey(row, col);\n    var range = [];\n\n    while (selectionMap[key]) {\n      range.push([row, col]);\n      key = getCellSelectionKey(row - 1, col - 1);\n\n      if (selectionMap[key]) {\n        row -= 1;\n        col -= 1;\n        continue;\n      }\n\n      if (!selectionMap[key]) {\n        key = getCellSelectionKey(row - 1, col);\n      }\n\n      if (selectionMap[key]) {\n        row -= 1;\n        continue;\n      }\n\n      if (!selectionMap[key]) {\n        key = getCellSelectionKey(row, col - 1);\n        col -= 1;\n      }\n    }\n\n    return range;\n  };\n\n  var toggleActiveCellSelection = (0, _react.useCallback)(function (fakeEvent) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var computedActiveCell = computedProps.computedActiveCell;\n\n    if (!computedActiveCell) {\n      return;\n    }\n\n    var _computedActiveCell = (0, _slicedToArray2.default)(computedActiveCell, 2),\n        rowIndex = _computedActiveCell[0],\n        columnIndex = _computedActiveCell[1];\n\n    var column = computedProps.getColumnBy(columnIndex);\n\n    if (column && column.cellSelectable === false) {\n      return;\n    }\n\n    var selected = isCellSelected(rowIndex, columnIndex);\n    var event = fakeEvent || {\n      ctrlKey: selected\n    };\n    computedProps.onCellClickAction(event, {\n      rowIndex: rowIndex,\n      columnIndex: columnIndex\n    });\n  }, []);\n  var isCellSelected = (0, _react.useCallback)(function (row, col) {\n    if (row && (0, _typeof2.default)(row) === 'object') {\n      col = row.columnIndex;\n      row = row.rowIndex;\n    }\n\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    if (computedProps.computedCellSelection) {\n      var key = computedProps.getCellSelectionKey(row, col);\n      return !!computedProps.computedCellSelection[key];\n    }\n\n    return false;\n  }, []);\n\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      cellDragStartRowIndex = _useState2[0],\n      setCellDragStartRowIndex = _useState2[1];\n\n  var onCellSelectionDraggerMouseDown = (0, _react.useMemo)(function () {\n    if (cellMultiSelectionEnabled && cellSelection) {\n      var _onCellSelectionDraggerMouseDown = function _onCellSelectionDraggerMouseDown(event, _ref3, selectionFixedCell) {\n        var columnIndex = _ref3.columnIndex,\n            rowIndex = _ref3.rowIndex;\n        var computedProps = computedPropsRef.current;\n\n        if (!computedProps) {\n          return;\n        }\n\n        var column = computedProps.getColumnBy(columnIndex);\n\n        if (column && column.cellSelectable === false) {\n          return;\n        }\n\n        if (!selectionFixedCell) {\n          var currentCell = [rowIndex, columnIndex];\n          var groupBy = computedProps.computedGroupBy;\n          var hasGroupBy = groupBy && groupBy.length;\n          var currentRange = !hasGroupBy ? getContinuousSelectedRangeFor(computedProps.computedCellSelection, currentCell) : [];\n          selectionFixedCell = !hasGroupBy ? getFirstSelectedCell(currentRange.length ? currentRange : [currentCell]) : computedProps.computedActiveCell || computedProps.lastSelectedCell;\n        }\n\n        var fn = function fn() {\n          computedProps.setListenOnCellEnter(false, fn);\n          setCellDragStartRowIndex(null);\n          computedProps.setSelectionFixedCell(null);\n        };\n\n        var queue = (0, _batchUpdate.default)();\n        queue(function () {\n          setCellDragStartRowIndex(rowIndex);\n\n          if (selectionFixedCell === undefined) {\n            selectionFixedCell = null;\n          }\n\n          computedProps.setSelectionFixedCell(selectionFixedCell);\n          computedProps.setListenOnCellEnter(true, fn);\n        });\n        queue.commit();\n      };\n\n      return _onCellSelectionDraggerMouseDown;\n    }\n\n    return null;\n  }, [cellMultiSelectionEnabled, cellSelection]);\n  return {\n    onCellEnter: onCellEnter,\n    toggleActiveCellSelection: toggleActiveCellSelection,\n    cellDragStartRowIndex: cellDragStartRowIndex,\n    setCellDragStartRowIndex: setCellDragStartRowIndex,\n    onCellSelectionDraggerMouseDown: onCellSelectionDraggerMouseDown,\n    getCellSelectionBetween: getCellSelectionBetween,\n    computedActiveCell: computedActiveCell,\n    incrementActiveCell: incrementActiveCell,\n    getCellSelectionIdKey: getCellSelectionIdKey,\n    setActiveCell: setActiveCell,\n    getCellSelectionKey: getCellSelectionKey,\n    cellSelectionEnabled: cellSelectionEnabled,\n    cellNavigationEnabled: cellNavigationEnabled,\n    cellMultiSelectionEnabled: cellMultiSelectionEnabled,\n    computedCellSelection: cellSelection,\n    setCellSelection: setCellSelection\n  };\n};\n\nexports.useCellSelection = useCellSelection;","map":{"version":3,"sources":["/Users/kathiavargas/node_modules/@inovua/reactdatagrid-community/plugins/cell-selection/useCellSelection.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","useCellSelection","_typeof2","_slicedToArray2","_react","_useProperty3","_batchUpdate","_clamp","_useActiveCell2","getFirstSelectedCell","cellSelection","sort","cell1","cell2","props","_ref","computedPropsRef","rowSelectionEnabled","hasRowNavigation","listenOnCellEnter","_useProperty","default","_useProperty2","setCellSelection","_useActiveCell","computedActiveCell","getCellSelectionIdKey","getCellSelectionBetween","setActiveCell","getCellSelectionKey","incrementActiveCell","cellSelectionEnabled","undefined","cellNavigationEnabled","enableKeyboardNavigation","cellMultiSelectionEnabled","multiSelect","onCellEnter","useMemo","event","_ref2","columnIndex","rowIndex","computedProps","current","data","getItemAt","__group","col","getColumnBy","cellSelectable","groupBy","computedGroupBy","minCol","length","range","selectionFixedCell","lastSelectedCell","queue","setLastCellInRange","keys","pop","direction","cellDragStartRowIndex","sign","scrollToRowIndex","count","visible","isCellVisible","left","leftDiff","top","topDiff","scrollToCell","commit","getContinuousSelectedRangeFor","selectionMap","cell","_cell","row","key","push","toggleActiveCellSelection","useCallback","fakeEvent","_computedActiveCell","column","selected","isCellSelected","ctrlKey","onCellClickAction","computedCellSelection","_useState","useState","_useState2","setCellDragStartRowIndex","onCellSelectionDraggerMouseDown","_onCellSelectionDraggerMouseDown","_ref3","currentCell","hasGroupBy","currentRange","fn","setListenOnCellEnter","setSelectionFixedCell"],"mappings":"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","sourcesContent":["/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCellSelection = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _useProperty3 = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/useProperty\"));\n\nvar _batchUpdate = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/batchUpdate\"));\n\nvar _clamp = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/clamp\"));\n\nvar _useActiveCell2 = _interopRequireDefault(require(\"./useActiveCell\"));\n\nvar getFirstSelectedCell = function getFirstSelectedCell(cellSelection) {\n  return cellSelection.sort(function (cell1, cell2) {\n    if (cell1[0] < cell2[0]) {\n      return -1;\n    } else if (cell1[0] > cell2[0]) {\n      return 1;\n    }\n\n    return cell1[1] < cell2[1] ? -1 : 1;\n  })[0];\n};\n\nvar useCellSelection = function useCellSelection(props, _ref, computedPropsRef) {\n  var rowSelectionEnabled = _ref.rowSelectionEnabled,\n      hasRowNavigation = _ref.hasRowNavigation,\n      listenOnCellEnter = _ref.listenOnCellEnter;\n\n  var _useProperty = (0, _useProperty3.default)(props, 'cellSelection'),\n      _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n      cellSelection = _useProperty2[0],\n      setCellSelection = _useProperty2[1];\n\n  var _useActiveCell = (0, _useActiveCell2.default)(props, computedPropsRef),\n      computedActiveCell = _useActiveCell.computedActiveCell,\n      getCellSelectionIdKey = _useActiveCell.getCellSelectionIdKey,\n      getCellSelectionBetween = _useActiveCell.getCellSelectionBetween,\n      setActiveCell = _useActiveCell.setActiveCell,\n      getCellSelectionKey = _useActiveCell.getCellSelectionKey,\n      incrementActiveCell = _useActiveCell.incrementActiveCell;\n\n  var cellSelectionEnabled = !rowSelectionEnabled ? !!cellSelection : false;\n\n  if (rowSelectionEnabled || hasRowNavigation) {\n    computedActiveCell = undefined;\n  }\n\n  var cellNavigationEnabled = computedActiveCell !== undefined;\n\n  if (cellSelection) {\n    cellNavigationEnabled = props.enableKeyboardNavigation !== false && !hasRowNavigation ? true : computedActiveCell !== undefined || !!cellSelection;\n  }\n\n  if (props.enableKeyboardNavigation === false) {\n    cellNavigationEnabled = false;\n  }\n\n  var cellMultiSelectionEnabled = cellSelectionEnabled && props.multiSelect !== false;\n  var onCellEnter = (0, _react.useMemo)(function () {\n    return listenOnCellEnter ? function (event, _ref2) {\n      var columnIndex = _ref2.columnIndex,\n          rowIndex = _ref2.rowIndex;\n      var computedProps = computedPropsRef.current;\n\n      if (!computedProps) {\n        return;\n      }\n\n      var data = computedProps.getItemAt(rowIndex);\n\n      if (!data || data.__group) {\n        return;\n      }\n\n      var col = computedProps.getColumnBy(columnIndex);\n\n      if (col && col.cellSelectable === false) {\n        return;\n      }\n\n      var groupBy = computedProps.computedGroupBy;\n      var minCol = groupBy ? groupBy.length : 0;\n\n      if (columnIndex < minCol) {\n        return;\n      }\n\n      var range = computedProps.getCellSelectionBetween(computedProps.selectionFixedCell || computedProps.computedActiveCell || computedProps.lastSelectedCell, [rowIndex, columnIndex]);\n      var queue = (0, _batchUpdate.default)();\n      queue(function () {\n        computedProps.setCellSelection(range);\n        computedProps.setLastCellInRange(Object.keys(range).pop() || '');\n      });\n      var direction = computedProps.cellDragStartRowIndex != null ? rowIndex - computedProps.cellDragStartRowIndex : rowIndex;\n      var sign = direction < 0 ? -1 : direction > 0 ? 1 : 0;\n      var scrollToRowIndex = (0, _clamp.default)(rowIndex + sign, 0, computedProps.count - 1);\n      var visible = computedProps.isCellVisible({\n        columnIndex: columnIndex,\n        rowIndex: scrollToRowIndex\n      });\n\n      if (visible !== true) {\n        visible = visible;\n        var left = visible.leftDiff < 0;\n        var top = visible.topDiff < 0;\n        computedProps.scrollToCell({\n          columnIndex: columnIndex,\n          rowIndex: scrollToRowIndex\n        }, {\n          top: top,\n          left: left\n        });\n      }\n\n      queue.commit();\n    } : null;\n  }, [listenOnCellEnter]);\n\n  var getContinuousSelectedRangeFor = function getContinuousSelectedRangeFor(selectionMap, cell) {\n    if (!cell) {\n      return [];\n    }\n\n    selectionMap = selectionMap || {};\n\n    var _cell = (0, _slicedToArray2.default)(cell, 2),\n        row = _cell[0],\n        col = _cell[1];\n\n    var key = getCellSelectionKey(row, col);\n    var range = [];\n\n    while (selectionMap[key]) {\n      range.push([row, col]);\n      key = getCellSelectionKey(row - 1, col - 1);\n\n      if (selectionMap[key]) {\n        row -= 1;\n        col -= 1;\n        continue;\n      }\n\n      if (!selectionMap[key]) {\n        key = getCellSelectionKey(row - 1, col);\n      }\n\n      if (selectionMap[key]) {\n        row -= 1;\n        continue;\n      }\n\n      if (!selectionMap[key]) {\n        key = getCellSelectionKey(row, col - 1);\n        col -= 1;\n      }\n    }\n\n    return range;\n  };\n\n  var toggleActiveCellSelection = (0, _react.useCallback)(function (fakeEvent) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var computedActiveCell = computedProps.computedActiveCell;\n\n    if (!computedActiveCell) {\n      return;\n    }\n\n    var _computedActiveCell = (0, _slicedToArray2.default)(computedActiveCell, 2),\n        rowIndex = _computedActiveCell[0],\n        columnIndex = _computedActiveCell[1];\n\n    var column = computedProps.getColumnBy(columnIndex);\n\n    if (column && column.cellSelectable === false) {\n      return;\n    }\n\n    var selected = isCellSelected(rowIndex, columnIndex);\n    var event = fakeEvent || {\n      ctrlKey: selected\n    };\n    computedProps.onCellClickAction(event, {\n      rowIndex: rowIndex,\n      columnIndex: columnIndex\n    });\n  }, []);\n  var isCellSelected = (0, _react.useCallback)(function (row, col) {\n    if (row && (0, _typeof2.default)(row) === 'object') {\n      col = row.columnIndex;\n      row = row.rowIndex;\n    }\n\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    if (computedProps.computedCellSelection) {\n      var key = computedProps.getCellSelectionKey(row, col);\n      return !!computedProps.computedCellSelection[key];\n    }\n\n    return false;\n  }, []);\n\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      cellDragStartRowIndex = _useState2[0],\n      setCellDragStartRowIndex = _useState2[1];\n\n  var onCellSelectionDraggerMouseDown = (0, _react.useMemo)(function () {\n    if (cellMultiSelectionEnabled && cellSelection) {\n      var _onCellSelectionDraggerMouseDown = function _onCellSelectionDraggerMouseDown(event, _ref3, selectionFixedCell) {\n        var columnIndex = _ref3.columnIndex,\n            rowIndex = _ref3.rowIndex;\n        var computedProps = computedPropsRef.current;\n\n        if (!computedProps) {\n          return;\n        }\n\n        var column = computedProps.getColumnBy(columnIndex);\n\n        if (column && column.cellSelectable === false) {\n          return;\n        }\n\n        if (!selectionFixedCell) {\n          var currentCell = [rowIndex, columnIndex];\n          var groupBy = computedProps.computedGroupBy;\n          var hasGroupBy = groupBy && groupBy.length;\n          var currentRange = !hasGroupBy ? getContinuousSelectedRangeFor(computedProps.computedCellSelection, currentCell) : [];\n          selectionFixedCell = !hasGroupBy ? getFirstSelectedCell(currentRange.length ? currentRange : [currentCell]) : computedProps.computedActiveCell || computedProps.lastSelectedCell;\n        }\n\n        var fn = function fn() {\n          computedProps.setListenOnCellEnter(false, fn);\n          setCellDragStartRowIndex(null);\n          computedProps.setSelectionFixedCell(null);\n        };\n\n        var queue = (0, _batchUpdate.default)();\n        queue(function () {\n          setCellDragStartRowIndex(rowIndex);\n\n          if (selectionFixedCell === undefined) {\n            selectionFixedCell = null;\n          }\n\n          computedProps.setSelectionFixedCell(selectionFixedCell);\n          computedProps.setListenOnCellEnter(true, fn);\n        });\n        queue.commit();\n      };\n\n      return _onCellSelectionDraggerMouseDown;\n    }\n\n    return null;\n  }, [cellMultiSelectionEnabled, cellSelection]);\n  return {\n    onCellEnter: onCellEnter,\n    toggleActiveCellSelection: toggleActiveCellSelection,\n    cellDragStartRowIndex: cellDragStartRowIndex,\n    setCellDragStartRowIndex: setCellDragStartRowIndex,\n    onCellSelectionDraggerMouseDown: onCellSelectionDraggerMouseDown,\n    getCellSelectionBetween: getCellSelectionBetween,\n    computedActiveCell: computedActiveCell,\n    incrementActiveCell: incrementActiveCell,\n    getCellSelectionIdKey: getCellSelectionIdKey,\n    setActiveCell: setActiveCell,\n    getCellSelectionKey: getCellSelectionKey,\n    cellSelectionEnabled: cellSelectionEnabled,\n    cellNavigationEnabled: cellNavigationEnabled,\n    cellMultiSelectionEnabled: cellMultiSelectionEnabled,\n    computedCellSelection: cellSelection,\n    setCellSelection: setCellSelection\n  };\n};\n\nexports.useCellSelection = useCellSelection;"]},"metadata":{},"sourceType":"script"}