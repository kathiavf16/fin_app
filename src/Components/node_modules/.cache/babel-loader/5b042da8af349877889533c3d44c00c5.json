{"ast":null,"code":"var _jsxFileName = \"/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/GeoChart.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport data from \"./states.json\";\n/**\n * Component that renders a map of Germany.\n */\n\nconsole.log(data.features);\n\nfunction GeoChart({\n  data,\n  property\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedState, setSelectedState] = useState(null); // will be called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#ccc\", \"red\"]);\n    console.log(minProp, maxProp); // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect(); // projects geo-coordinates on a 2D plane\n\n    const projection = geoAlbersUsa().fitSize([width, height], selectedState || data).precision(100); // takes geojson data,\n    // transforms that into the d attribute of a path element\n\n    const pathGenerator = geoPath().projection(projection); // render each country\n\n    svg.selectAll(\".state\").data(data.features).join(\"path\").attr('d', path).attr(\"class\", \"state\").style('cursor', 'pointer').attr('fill', d => {\n      return d.id == \"06\" ? '#CC442F' : '#6eabcc';\n    }).attr('opacity', d => {\n      return d.id == \"06\" ? 1 : .7;\n    }).on('click', d => {\n      d3.selectAll('.state').attr('fill', '#6eabcc').attr('opacity', .7);\n    }); // .transition()\n    // .attr(\"fill\", feature => colorScale(feature.properties[property]))\n    // .attr(\"d\", feature => pathGenerator(feature));\n    // render text\n\n    svg.selectAll(\".label\").data([selectedState]).join(\"text\").attr(\"class\", \"label\").attr(\"x\", 10).attr(\"y\", 25);\n  }, [data, dimensions, property, selectedState]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default GeoChart;","map":{"version":3,"sources":["/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/GeoChart.js"],"names":["React","useRef","useEffect","useState","select","geoPath","geoAlbersUsa","min","max","scaleLinear","useResizeObserver","data","console","log","features","GeoChart","property","svgRef","wrapperRef","dimensions","selectedState","setSelectedState","svg","current","minProp","feature","properties","maxProp","colorScale","domain","range","width","height","getBoundingClientRect","projection","fitSize","precision","pathGenerator","selectAll","join","attr","path","style","d","id","on","d3","marginBottom"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport data from \"./states.json\"\n\n/**\n * Component that renders a map of Germany.\n */\nconsole.log(data.features)\n\nfunction GeoChart({ data, property }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedState, setSelectedState] = useState(null);\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear()\n      .domain([minProp, maxProp])\n      .range([\"#ccc\", \"red\"]);\n      console.log(minProp, maxProp)\n    // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // projects geo-coordinates on a 2D plane\n    const projection = geoAlbersUsa()\n      .fitSize([width, height], selectedState || data)\n      .precision(100);\n\n    // takes geojson data,\n    // transforms that into the d attribute of a path element\n    const pathGenerator = geoPath().projection(projection);\n\n    // render each country\n    svg\n      .selectAll(\".state\")\n      .data(data.features)\n      .join(\"path\")\n      .attr('d', path)\n      .attr(\"class\", \"state\")\n      .style('cursor', 'pointer')\n      .attr('fill', d => {return (d.id == \"06\") ? '#CC442F' : '#6eabcc'})\n      .attr('opacity', d => {return (d.id == \"06\") ? 1 : .7})\n      .on('click', d => {\n            d3.selectAll('.state')\n          .attr('fill', '#6eabcc')\n          .attr('opacity', .7)});\n\n      // .transition()\n      // .attr(\"fill\", feature => colorScale(feature.properties[property]))\n      // .attr(\"d\", feature => pathGenerator(feature));\n\n    // render text\n    svg\n      .selectAll(\".label\")\n      .data([selectedState])\n      .join(\"text\")\n      .attr(\"class\", \"label\")\n      .attr(\"x\", 10)\n      .attr(\"y\", 25);\n  }, [data, dimensions, property, selectedState]);\n\n  return (\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n\nexport default GeoChart;\n"]},"metadata":{},"sourceType":"module"}