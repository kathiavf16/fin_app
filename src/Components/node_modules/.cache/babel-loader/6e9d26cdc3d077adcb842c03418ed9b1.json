{"ast":null,"code":"var _jsxFileName = \"/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/GeoChart.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport data from \"./states.json\";\n/**\n * Component that renders a map of Germany.\n */\n\nconsole.log(data.Features);\n\nfunction GeoChart({\n  data,\n  property\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedState, setSelectedState] = useState(null); // will be called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#ccc\", \"red\"]); // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect(); // projects geo-coordinates on a 2D plane\n\n    const projection = geoAlbersUsa().fitSize([width, height], selectedState || data).precision(100); // takes geojson data,\n    // transforms that into the d attribute of a path element\n\n    const pathGenerator = geoPath().projection(projection); // render each country\n\n    svg.selectAll(\".state\").data(data.features).join(\"path\").on(\"click\", feature => {\n      setSelectedState(selectedState === feature ? null : feature);\n    }).attr(\"class\", \"state\").transition().attr(\"fill\", Feature => colorScale(Feature.properties[property])).attr(\"d\", feature => pathGenerator(feature)); // render text\n\n    svg.selectAll(\".label\").data([selectedState]).join(\"text\").attr(\"class\", \"label\").text(feature => feature && feature.properties.NAME + \": \" + feature.properties[property].toLocaleString()).attr(\"x\", 10).attr(\"y\", 25);\n  }, [data, dimensions, property, selectedState]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default GeoChart;","map":{"version":3,"sources":["/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/GeoChart.js"],"names":["React","useRef","useEffect","useState","select","geoPath","geoAlbersUsa","min","max","scaleLinear","useResizeObserver","data","console","log","Features","GeoChart","property","svgRef","wrapperRef","dimensions","selectedState","setSelectedState","svg","current","minProp","features","feature","properties","maxProp","colorScale","domain","range","width","height","getBoundingClientRect","projection","fitSize","precision","pathGenerator","selectAll","join","on","attr","transition","Feature","text","NAME","toLocaleString","marginBottom"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,YAA1B,EAAwCC,GAAxC,EAA6CC,GAA7C,EAAkDC,WAAlD,QAAqE,IAArE;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,IAAP,MAAiB,eAAjB;AAEA;AACA;AACA;;AACAC,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,QAAjB;;AAEA,SAASC,QAAT,CAAkB;AAAEJ,EAAAA,IAAF;AAAQK,EAAAA;AAAR,CAAlB,EAAsC;AACpC,QAAMC,MAAM,GAAGhB,MAAM,EAArB;AACA,QAAMiB,UAAU,GAAGjB,MAAM,EAAzB;AACA,QAAMkB,UAAU,GAAGT,iBAAiB,CAACQ,UAAD,CAApC;AACA,QAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoClB,QAAQ,CAAC,IAAD,CAAlD,CAJoC,CAMpC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,GAAG,GAAGlB,MAAM,CAACa,MAAM,CAACM,OAAR,CAAlB;AAEA,UAAMC,OAAO,GAAGjB,GAAG,CAACI,IAAI,CAACc,QAAN,EAAgBC,OAAO,IAAIA,OAAO,CAACC,UAAR,CAAmBX,QAAnB,CAA3B,CAAnB;AACA,UAAMY,OAAO,GAAGpB,GAAG,CAACG,IAAI,CAACc,QAAN,EAAgBC,OAAO,IAAIA,OAAO,CAACC,UAAR,CAAmBX,QAAnB,CAA3B,CAAnB;AACA,UAAMa,UAAU,GAAGpB,WAAW,GAC3BqB,MADgB,CACT,CAACN,OAAD,EAAUI,OAAV,CADS,EAEhBG,KAFgB,CAEV,CAAC,MAAD,EAAS,KAAT,CAFU,CAAnB,CALc,CASd;AACA;;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QACJd,UAAU,IAAID,UAAU,CAACK,OAAX,CAAmBW,qBAAnB,EADhB,CAXc,CAcd;;AACA,UAAMC,UAAU,GAAG7B,YAAY,GAC5B8B,OADgB,CACR,CAACJ,KAAD,EAAQC,MAAR,CADQ,EACSb,aAAa,IAAIT,IAD1B,EAEhB0B,SAFgB,CAEN,GAFM,CAAnB,CAfc,CAmBd;AACA;;AACA,UAAMC,aAAa,GAAGjC,OAAO,GAAG8B,UAAV,CAAqBA,UAArB,CAAtB,CArBc,CAuBd;;AACAb,IAAAA,GAAG,CACAiB,SADH,CACa,QADb,EAEG5B,IAFH,CAEQA,IAAI,CAACc,QAFb,EAGGe,IAHH,CAGQ,MAHR,EAIGC,EAJH,CAIM,OAJN,EAIef,OAAO,IAAI;AACtBL,MAAAA,gBAAgB,CAACD,aAAa,KAAKM,OAAlB,GAA4B,IAA5B,GAAmCA,OAApC,CAAhB;AACD,KANH,EAOGgB,IAPH,CAOQ,OAPR,EAOiB,OAPjB,EAQGC,UARH,GASGD,IATH,CASQ,MATR,EASgBE,OAAO,IAAIf,UAAU,CAACe,OAAO,CAACjB,UAAR,CAAmBX,QAAnB,CAAD,CATrC,EAUG0B,IAVH,CAUQ,GAVR,EAUahB,OAAO,IAAIY,aAAa,CAACZ,OAAD,CAVrC,EAxBc,CAoCd;;AACAJ,IAAAA,GAAG,CACAiB,SADH,CACa,QADb,EAEG5B,IAFH,CAEQ,CAACS,aAAD,CAFR,EAGGoB,IAHH,CAGQ,MAHR,EAIGE,IAJH,CAIQ,OAJR,EAIiB,OAJjB,EAKGG,IALH,CAMInB,OAAO,IACLA,OAAO,IACPA,OAAO,CAACC,UAAR,CAAmBmB,IAAnB,GACE,IADF,GAEEpB,OAAO,CAACC,UAAR,CAAmBX,QAAnB,EAA6B+B,cAA7B,EAVR,EAYGL,IAZH,CAYQ,GAZR,EAYa,EAZb,EAaGA,IAbH,CAaQ,GAbR,EAaa,EAbb;AAcD,GAnDQ,EAmDN,CAAC/B,IAAD,EAAOQ,UAAP,EAAmBH,QAAnB,EAA6BI,aAA7B,CAnDM,CAAT;AAqDA,sBACE;AAAK,IAAA,GAAG,EAAEF,UAAV;AAAsB,IAAA,KAAK,EAAE;AAAE8B,MAAAA,YAAY,EAAE;AAAhB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAE/B,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,eAAeF,QAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport data from \"./states.json\"\n\n/**\n * Component that renders a map of Germany.\n */\nconsole.log(data.Features)\n\nfunction GeoChart({ data, property }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedState, setSelectedState] = useState(null);\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear()\n      .domain([minProp, maxProp])\n      .range([\"#ccc\", \"red\"]);\n\n    // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // projects geo-coordinates on a 2D plane\n    const projection = geoAlbersUsa()\n      .fitSize([width, height], selectedState || data)\n      .precision(100);\n\n    // takes geojson data,\n    // transforms that into the d attribute of a path element\n    const pathGenerator = geoPath().projection(projection);\n\n    // render each country\n    svg\n      .selectAll(\".state\")\n      .data(data.features)\n      .join(\"path\")\n      .on(\"click\", feature => {\n        setSelectedState(selectedState === feature ? null : feature);\n      })\n      .attr(\"class\", \"state\")\n      .transition()\n      .attr(\"fill\", Feature => colorScale(Feature.properties[property]))\n      .attr(\"d\", feature => pathGenerator(feature));\n\n    // render text\n    svg\n      .selectAll(\".label\")\n      .data([selectedState])\n      .join(\"text\")\n      .attr(\"class\", \"label\")\n      .text(\n        feature =>\n          feature &&\n          feature.properties.NAME +\n            \": \" +\n            feature.properties[property].toLocaleString()\n      )\n      .attr(\"x\", 10)\n      .attr(\"y\", 25);\n  }, [data, dimensions, property, selectedState]);\n\n  return (\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n\nexport default GeoChart;\n"]},"metadata":{},"sourceType":"module"}