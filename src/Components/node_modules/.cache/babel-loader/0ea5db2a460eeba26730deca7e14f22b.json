{"ast":null,"code":"/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _react = require(\"react\");\n\nvar _default = function _default(menu, computedProps, menusRef) {\n  var menuPortalContainer = computedProps.menuPortalContainer;\n  var didMount = menu ? menu.props.componentDidMount : null;\n  var willUnmount = menu ? menu.props.componentWillUnmount : null;\n\n  if (menu) {\n    menu = (0, _react.cloneElement)(menu, {\n      rtl: computedProps.rtl,\n      componentDidMount: function componentDidMount() {\n        if (didMount) {\n          didMount.apply(void 0, arguments);\n        }\n\n        menusRef = menusRef || computedProps.menusRef;\n        var menuInstance = arguments.length <= 0 ? undefined : arguments[0];\n        menusRef.current.push(menuInstance);\n      },\n      componentWillUnmount: function componentWillUnmount() {\n        if (willUnmount) {\n          willUnmount.apply(void 0, arguments);\n        }\n\n        var menuInstance = arguments.length <= 0 ? undefined : arguments[0];\n        menusRef = menusRef || computedProps.menusRef;\n        menusRef.current = menusRef.current.filter(function (it) {\n          return it !== menuInstance;\n        });\n      }\n    });\n  }\n\n  if (menuPortalContainer && _reactDom.default.createPortal) {\n    var container = menuPortalContainer;\n\n    if (typeof container === 'string') {\n      container = document.querySelector(container);\n    }\n\n    if (container) {\n      return _reactDom.default.createPortal(menu, container);\n    }\n  }\n\n  return menu;\n};\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/kathiavargas/node_modules/@inovua/reactdatagrid-community/renderGridMenu.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_reactDom","_react","_default","menu","computedProps","menusRef","menuPortalContainer","didMount","props","componentDidMount","willUnmount","componentWillUnmount","cloneElement","rtl","apply","arguments","menuInstance","length","undefined","current","push","filter","it","createPortal","container","document","querySelector"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,SAAS,GAAGP,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAtC;;AAEA,IAAIO,MAAM,GAAGP,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIQ,QAAQ,GAAG,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,aAAxB,EAAuCC,QAAvC,EAAiD;AAC9D,MAAIC,mBAAmB,GAAGF,aAAa,CAACE,mBAAxC;AACA,MAAIC,QAAQ,GAAGJ,IAAI,GAAGA,IAAI,CAACK,KAAL,CAAWC,iBAAd,GAAkC,IAArD;AACA,MAAIC,WAAW,GAAGP,IAAI,GAAGA,IAAI,CAACK,KAAL,CAAWG,oBAAd,GAAqC,IAA3D;;AAEA,MAAIR,IAAJ,EAAU;AACRA,IAAAA,IAAI,GAAG,CAAC,GAAGF,MAAM,CAACW,YAAX,EAAyBT,IAAzB,EAA+B;AACpCU,MAAAA,GAAG,EAAET,aAAa,CAACS,GADiB;AAEpCJ,MAAAA,iBAAiB,EAAE,SAASA,iBAAT,GAA6B;AAC9C,YAAIF,QAAJ,EAAc;AACZA,UAAAA,QAAQ,CAACO,KAAT,CAAe,KAAK,CAApB,EAAuBC,SAAvB;AACD;;AAEDV,QAAAA,QAAQ,GAAGA,QAAQ,IAAID,aAAa,CAACC,QAArC;AACA,YAAIW,YAAY,GAAGD,SAAS,CAACE,MAAV,IAAoB,CAApB,GAAwBC,SAAxB,GAAoCH,SAAS,CAAC,CAAD,CAAhE;AACAV,QAAAA,QAAQ,CAACc,OAAT,CAAiBC,IAAjB,CAAsBJ,YAAtB;AACD,OAVmC;AAWpCL,MAAAA,oBAAoB,EAAE,SAASA,oBAAT,GAAgC;AACpD,YAAID,WAAJ,EAAiB;AACfA,UAAAA,WAAW,CAACI,KAAZ,CAAkB,KAAK,CAAvB,EAA0BC,SAA1B;AACD;;AAED,YAAIC,YAAY,GAAGD,SAAS,CAACE,MAAV,IAAoB,CAApB,GAAwBC,SAAxB,GAAoCH,SAAS,CAAC,CAAD,CAAhE;AACAV,QAAAA,QAAQ,GAAGA,QAAQ,IAAID,aAAa,CAACC,QAArC;AACAA,QAAAA,QAAQ,CAACc,OAAT,GAAmBd,QAAQ,CAACc,OAAT,CAAiBE,MAAjB,CAAwB,UAAUC,EAAV,EAAc;AACvD,iBAAOA,EAAE,KAAKN,YAAd;AACD,SAFkB,CAAnB;AAGD;AArBmC,KAA/B,CAAP;AAuBD;;AAED,MAAIV,mBAAmB,IAAIN,SAAS,CAACD,OAAV,CAAkBwB,YAA7C,EAA2D;AACzD,QAAIC,SAAS,GAAGlB,mBAAhB;;AAEA,QAAI,OAAOkB,SAAP,KAAqB,QAAzB,EAAmC;AACjCA,MAAAA,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuBF,SAAvB,CAAZ;AACD;;AAED,QAAIA,SAAJ,EAAe;AACb,aAAOxB,SAAS,CAACD,OAAV,CAAkBwB,YAAlB,CAA+BpB,IAA/B,EAAqCqB,SAArC,CAAP;AACD;AACF;;AAED,SAAOrB,IAAP;AACD,CA5CD;;AA8CAN,OAAO,CAACE,OAAR,GAAkBG,QAAlB","sourcesContent":["/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _react = require(\"react\");\n\nvar _default = function _default(menu, computedProps, menusRef) {\n  var menuPortalContainer = computedProps.menuPortalContainer;\n  var didMount = menu ? menu.props.componentDidMount : null;\n  var willUnmount = menu ? menu.props.componentWillUnmount : null;\n\n  if (menu) {\n    menu = (0, _react.cloneElement)(menu, {\n      rtl: computedProps.rtl,\n      componentDidMount: function componentDidMount() {\n        if (didMount) {\n          didMount.apply(void 0, arguments);\n        }\n\n        menusRef = menusRef || computedProps.menusRef;\n        var menuInstance = arguments.length <= 0 ? undefined : arguments[0];\n        menusRef.current.push(menuInstance);\n      },\n      componentWillUnmount: function componentWillUnmount() {\n        if (willUnmount) {\n          willUnmount.apply(void 0, arguments);\n        }\n\n        var menuInstance = arguments.length <= 0 ? undefined : arguments[0];\n        menusRef = menusRef || computedProps.menusRef;\n        menusRef.current = menusRef.current.filter(function (it) {\n          return it !== menuInstance;\n        });\n      }\n    });\n  }\n\n  if (menuPortalContainer && _reactDom.default.createPortal) {\n    var container = menuPortalContainer;\n\n    if (typeof container === 'string') {\n      container = document.querySelector(container);\n    }\n\n    if (container) {\n      return _reactDom.default.createPortal(menu, container);\n    }\n  }\n\n  return menu;\n};\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}