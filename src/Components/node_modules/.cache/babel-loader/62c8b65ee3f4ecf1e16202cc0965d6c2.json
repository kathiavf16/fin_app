{"ast":null,"code":"/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getTransformedStringValues;\nexports.getDecimalDelimiterPosition = exports.countDecimalDigits = void 0;\n\nvar _getDecimalDelimiter = _interopRequireDefault(require(\"./get-decimal-delimiter\"));\n\nvar _getDigitGroupDelimiter = _interopRequireDefault(require(\"./get-digit-group-delimiter\"));\n\nvar _convertStringToNumber = _interopRequireDefault(require(\"./convert-string-to-number\"));\n\nvar getDecimalDelimiterPosition = function getDecimalDelimiterPosition(value, decimalDelimiter) {\n  var string = value && value.toString();\n  var position = string && string.indexOf(decimalDelimiter);\n  return position !== -1 ? position : false;\n};\n\nexports.getDecimalDelimiterPosition = getDecimalDelimiterPosition;\n\nvar countDecimalDigits = function countDecimalDigits(string, decimalDelimiter, decimalPosition) {\n  var position = decimalPosition || getDecimalDelimiterPosition(string, decimalDelimiter);\n\n  if (isNaN(position)) {\n    return 0;\n  }\n\n  if (typeof position === 'number' && position < string.length) {\n    return string.length - position - 1;\n  }\n\n  return 0;\n};\n\nexports.countDecimalDigits = countDecimalDigits;\n\nfunction getTransformedStringValues(stringInput) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var internalApi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (typeof stringInput !== 'string') {\n    stringInput += '';\n  }\n\n  if (!stringInput) {\n    return ['', null];\n  }\n\n  stringInput = stringInput.replace(/[^0-9\\,\\.\\-\\+]/g, '');\n\n  if (stringInput === '-' || stringInput === '-.') {\n    return [stringInput, null];\n  }\n\n  var locale = props.locale,\n      _props$min = props.min,\n      min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min,\n      _props$max = props.max,\n      max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max,\n      suffix = props.suffix,\n      prefix = props.prefix;\n  var precision = props.precision || null;\n\n  if (precision > 20) {\n    precision = 20;\n  }\n\n  var _internalApi$getDecim = internalApi.getDecimalDelimiter,\n      getDecimalDelimiter = _internalApi$getDecim === void 0 ? _getDecimalDelimiter.default : _internalApi$getDecim,\n      _internalApi$getDigit = internalApi.getDigitGroupDelimiter,\n      getDigitGroupDelimiter = _internalApi$getDigit === void 0 ? _getDigitGroupDelimiter.default : _internalApi$getDigit,\n      _internalApi$convertS = internalApi.convertStringToNumber,\n      convertStringToNumber = _internalApi$convertS === void 0 ? _convertStringToNumber.default : _internalApi$convertS;\n  var decimalDelimiter = getDecimalDelimiter(locale);\n\n  if (stringInput === decimalDelimiter) {\n    return [stringInput, null];\n  }\n\n  var decimalDelimiterPosition = getDecimalDelimiterPosition(stringInput, decimalDelimiter);\n  var decimalDigitsInInput = countDecimalDigits(stringInput, decimalDelimiter, decimalDelimiterPosition);\n\n  if (precision || precision === 0 && decimalDigitsInInput > precision) {\n    stringInput = stringInput.substring(0, stringInput.length - (decimalDigitsInInput - precision));\n  }\n\n  var digitGroupDelimiter = getDigitGroupDelimiter(locale);\n  var parsedResult = convertStringToNumber(stringInput, {\n    digitGroupDelimiter: digitGroupDelimiter,\n    decimalDelimiter: decimalDelimiter,\n    min: min,\n    max: max\n  });\n\n  if (isNaN(parsedResult)) {\n    return ['', null];\n  }\n\n  var numberWasClamped = parsedResult === min || parsedResult === max;\n\n  if (numberWasClamped) {\n    decimalDigitsInInput = 0;\n  }\n\n  var formatingOptions = {\n    maximumFractionDigits: precision ? Math.min(precision, 20) : 20,\n    minimumFractionDigits: Math.min(precision || decimalDigitsInInput, 20)\n  };\n  var stringRepresentation = parsedResult.toLocaleString(locale, formatingOptions);\n\n  if (!precision && !numberWasClamped && !decimalDigitsInInput && decimalDelimiterPosition === stringInput.length - 1) {\n    stringRepresentation += '.';\n  }\n\n  if (prefix) {\n    stringRepresentation = \"\".concat(prefix, \" \").concat(stringRepresentation);\n  }\n\n  if (suffix) {\n    stringRepresentation = \"\".concat(stringRepresentation, \" \").concat(suffix);\n  }\n\n  return [stringRepresentation, parsedResult];\n}","map":{"version":3,"sources":["/Users/kathiavargas/node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-transformed-string-values.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","getTransformedStringValues","getDecimalDelimiterPosition","countDecimalDigits","_getDecimalDelimiter","_getDigitGroupDelimiter","_convertStringToNumber","decimalDelimiter","string","toString","position","indexOf","decimalPosition","isNaN","length","stringInput","props","arguments","undefined","internalApi","replace","locale","_props$min","min","Number","MIN_SAFE_INTEGER","_props$max","max","MAX_SAFE_INTEGER","suffix","prefix","precision","_internalApi$getDecim","getDecimalDelimiter","_internalApi$getDigit","getDigitGroupDelimiter","_internalApi$convertS","convertStringToNumber","decimalDelimiterPosition","decimalDigitsInInput","substring","digitGroupDelimiter","parsedResult","numberWasClamped","formatingOptions","maximumFractionDigits","Math","minimumFractionDigits","stringRepresentation","toLocaleString","concat"],"mappings":"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","sourcesContent":["/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getTransformedStringValues;\nexports.getDecimalDelimiterPosition = exports.countDecimalDigits = void 0;\n\nvar _getDecimalDelimiter = _interopRequireDefault(require(\"./get-decimal-delimiter\"));\n\nvar _getDigitGroupDelimiter = _interopRequireDefault(require(\"./get-digit-group-delimiter\"));\n\nvar _convertStringToNumber = _interopRequireDefault(require(\"./convert-string-to-number\"));\n\nvar getDecimalDelimiterPosition = function getDecimalDelimiterPosition(value, decimalDelimiter) {\n  var string = value && value.toString();\n  var position = string && string.indexOf(decimalDelimiter);\n  return position !== -1 ? position : false;\n};\n\nexports.getDecimalDelimiterPosition = getDecimalDelimiterPosition;\n\nvar countDecimalDigits = function countDecimalDigits(string, decimalDelimiter, decimalPosition) {\n  var position = decimalPosition || getDecimalDelimiterPosition(string, decimalDelimiter);\n\n  if (isNaN(position)) {\n    return 0;\n  }\n\n  if (typeof position === 'number' && position < string.length) {\n    return string.length - position - 1;\n  }\n\n  return 0;\n};\n\nexports.countDecimalDigits = countDecimalDigits;\n\nfunction getTransformedStringValues(stringInput) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var internalApi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (typeof stringInput !== 'string') {\n    stringInput += '';\n  }\n\n  if (!stringInput) {\n    return ['', null];\n  }\n\n  stringInput = stringInput.replace(/[^0-9\\,\\.\\-\\+]/g, '');\n\n  if (stringInput === '-' || stringInput === '-.') {\n    return [stringInput, null];\n  }\n\n  var locale = props.locale,\n      _props$min = props.min,\n      min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min,\n      _props$max = props.max,\n      max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max,\n      suffix = props.suffix,\n      prefix = props.prefix;\n  var precision = props.precision || null;\n\n  if (precision > 20) {\n    precision = 20;\n  }\n\n  var _internalApi$getDecim = internalApi.getDecimalDelimiter,\n      getDecimalDelimiter = _internalApi$getDecim === void 0 ? _getDecimalDelimiter.default : _internalApi$getDecim,\n      _internalApi$getDigit = internalApi.getDigitGroupDelimiter,\n      getDigitGroupDelimiter = _internalApi$getDigit === void 0 ? _getDigitGroupDelimiter.default : _internalApi$getDigit,\n      _internalApi$convertS = internalApi.convertStringToNumber,\n      convertStringToNumber = _internalApi$convertS === void 0 ? _convertStringToNumber.default : _internalApi$convertS;\n  var decimalDelimiter = getDecimalDelimiter(locale);\n\n  if (stringInput === decimalDelimiter) {\n    return [stringInput, null];\n  }\n\n  var decimalDelimiterPosition = getDecimalDelimiterPosition(stringInput, decimalDelimiter);\n  var decimalDigitsInInput = countDecimalDigits(stringInput, decimalDelimiter, decimalDelimiterPosition);\n\n  if (precision || precision === 0 && decimalDigitsInInput > precision) {\n    stringInput = stringInput.substring(0, stringInput.length - (decimalDigitsInInput - precision));\n  }\n\n  var digitGroupDelimiter = getDigitGroupDelimiter(locale);\n  var parsedResult = convertStringToNumber(stringInput, {\n    digitGroupDelimiter: digitGroupDelimiter,\n    decimalDelimiter: decimalDelimiter,\n    min: min,\n    max: max\n  });\n\n  if (isNaN(parsedResult)) {\n    return ['', null];\n  }\n\n  var numberWasClamped = parsedResult === min || parsedResult === max;\n\n  if (numberWasClamped) {\n    decimalDigitsInInput = 0;\n  }\n\n  var formatingOptions = {\n    maximumFractionDigits: precision ? Math.min(precision, 20) : 20,\n    minimumFractionDigits: Math.min(precision || decimalDigitsInInput, 20)\n  };\n  var stringRepresentation = parsedResult.toLocaleString(locale, formatingOptions);\n\n  if (!precision && !numberWasClamped && !decimalDigitsInInput && decimalDelimiterPosition === stringInput.length - 1) {\n    stringRepresentation += '.';\n  }\n\n  if (prefix) {\n    stringRepresentation = \"\".concat(prefix, \" \").concat(stringRepresentation);\n  }\n\n  if (suffix) {\n    stringRepresentation = \"\".concat(stringRepresentation, \" \").concat(suffix);\n  }\n\n  return [stringRepresentation, parsedResult];\n}"]},"metadata":{},"sourceType":"script"}