{"ast":null,"code":"var _jsxFileName = \"/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/GeoChart.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear, update } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n/**\n * Component that renders a map of Germany.\n */\n\nfunction GeoChart({\n  data,\n  property\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedState, setSelectedState] = useState(null);\n  console.log(\"states:\", selectedState, setSelectedState); // will be called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#ccc\", \"red\"]); // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect(); // projects geo-coordinates on a 2D plane\n\n    const projection = geoAlbersUsa().fitSize([width, height], selectedState || data).precision(100); // takes geojson data,\n    // transforms that into the d attribute of a path element\n\n    const pathGenerator = geoPath().projection(projection); // render each country\n\n    svg.selectAll(\".state\").data(data.features).join(\"path\").attr('fill', d => {\n      return d.properties.STATE === \"06\" ? '#CC442F' : '#6eabcc';\n    }).attr('opacity', d => {\n      return d.properties.STATE === \"06\" ? 1 : .7;\n    }).on(\"click\", feature => {\n      svg.selectAll('.state').attr('fill', '#6eabcc').attr('opacity', .7);\n    }).style('cursor', 'pointer').attr(\"class\", \"state\").transition() //.attr(\"fill\", feature => colorScale(feature.properties[property]))\n    .attr(\"d\", feature => pathGenerator(feature));\n    const outline = svg.append('path').attr('fill', '#CC442F').attr('stroke', 'white').attr('stroke-linejoin', 'round'); // render text\n    // svg\n    //   .selectAll(\".label\")\n    //   .data([selectedState])\n    //   .join(\"text\")\n    //   .attr(\"class\", \"label\")\n    //   .attr(\"x\", 10)\n    //   .attr(\"y\", 25);\n  }, [data, dimensions, property, selectedState]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default GeoChart;","map":{"version":3,"sources":["/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/GeoChart.js"],"names":["React","useRef","useEffect","useState","select","geoPath","geoAlbersUsa","min","max","scaleLinear","update","useResizeObserver","GeoChart","data","property","svgRef","wrapperRef","dimensions","selectedState","setSelectedState","console","log","svg","current","minProp","features","feature","properties","maxProp","colorScale","domain","range","width","height","getBoundingClientRect","projection","fitSize","precision","pathGenerator","selectAll","join","attr","d","STATE","on","style","transition","outline","append","marginBottom"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear, update } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\n/**\n * Component that renders a map of Germany.\n */\n\nfunction GeoChart({ data, property }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedState, setSelectedState] = useState(null);\n  console.log(\"states:\", selectedState, setSelectedState)\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear()\n      .domain([minProp, maxProp])\n      .range([\"#ccc\", \"red\"]);\n    // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // projects geo-coordinates on a 2D plane\n    const projection = geoAlbersUsa()\n      .fitSize([width, height], selectedState || data)\n      .precision(100);\n\n    // takes geojson data,\n    // transforms that into the d attribute of a path element\n    const pathGenerator = geoPath().projection(projection);\n\n    // render each country\n    svg\n      .selectAll(\".state\")\n      .data(data.features)\n      .join(\"path\")\n      .attr('fill', d => {return (d.properties.STATE === \"06\") ? '#CC442F' : '#6eabcc'})\n      .attr('opacity', d => {return (d.properties.STATE === \"06\") ? 1 : .7})\n      .on(\"click\", feature => {\n       svg.selectAll('.state')\n          .attr('fill', '#6eabcc')\n          .attr('opacity', .7);\n      })\n      .style('cursor', 'pointer')\n      .attr(\"class\", \"state\")\n      .transition()\n      //.attr(\"fill\", feature => colorScale(feature.properties[property]))\n      .attr(\"d\", feature => pathGenerator(feature));\n\n      const outline = svg.append('path')\n      .attr('fill', '#CC442F')\n      .attr('stroke', 'white')\n      .attr('stroke-linejoin', 'round');\n\n\n    // render text\n    // svg\n    //   .selectAll(\".label\")\n    //   .data([selectedState])\n    //   .join(\"text\")\n    //   .attr(\"class\", \"label\")\n    //   .attr(\"x\", 10)\n    //   .attr(\"y\", 25);\n  }, [data, dimensions, property, selectedState]);\n\n  return (\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n\nexport default GeoChart;\n"]},"metadata":{},"sourceType":"module"}