{"ast":null,"code":"var _jsxFileName = \"/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/GeoChart.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n/**\n * Component that renders a map of Germany.\n */\n\nfunction GeoChart({\n  data,\n  property\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedState, setSelectedState] = useState(9);\n  console.log(selectedState, setSelectedState); // will be called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#ccc\", \"red\"]); // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect(); // projects geo-coordinates on a 2D plane\n\n    const projection = geoAlbersUsa().fitSize([width, height], selectedState || data).precision(100); // takes geojson data,\n    // transforms that into the d attribute of a path element\n\n    const pathGenerator = geoPath().projection(projection); // render each country\n\n    svg.selectAll(\".state\").data(data.features).join(\"path\").on(\"click\", feature => {\n      setSelectedState(selectedState === feature ? null : feature);\n    }).style('cursor', 'pointer').attr(\"class\", \"state\").transition().attr(\"fill\", feature => colorScale(feature.properties[property])).attr(\"d\", feature => pathGenerator(feature)); // render text\n\n    svg.selectAll(\".label\").data([selectedState]).join(\"text\").attr(\"class\", \"label\").attr(\"x\", 10).attr(\"y\", 25);\n  }, [data, dimensions, property, selectedState]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default GeoChart;","map":{"version":3,"sources":["/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/GeoChart.js"],"names":["React","useRef","useEffect","useState","select","geoPath","geoAlbersUsa","min","max","scaleLinear","useResizeObserver","GeoChart","data","property","svgRef","wrapperRef","dimensions","selectedState","setSelectedState","console","log","svg","current","minProp","features","feature","properties","maxProp","colorScale","domain","range","width","height","getBoundingClientRect","projection","fitSize","precision","pathGenerator","selectAll","join","on","style","attr","transition","marginBottom"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\n/**\n * Component that renders a map of Germany.\n */\n\nfunction GeoChart({ data, property }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedState, setSelectedState] = useState(9);\n  console.log(selectedState, setSelectedState)\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear()\n      .domain([minProp, maxProp])\n      .range([\"#ccc\", \"red\"]);\n    // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // projects geo-coordinates on a 2D plane\n    const projection = geoAlbersUsa()\n      .fitSize([width, height], selectedState || data)\n      .precision(100);\n\n    // takes geojson data,\n    // transforms that into the d attribute of a path element\n    const pathGenerator = geoPath().projection(projection);\n\n    // render each country\n    svg\n      .selectAll(\".state\")\n      .data(data.features)\n      .join(\"path\")\n      .on(\"click\", feature => {\n        setSelectedState(selectedState === feature ? null : feature);\n      })\n      .style('cursor', 'pointer')\n      .attr(\"class\", \"state\")\n      .transition()\n      .attr(\"fill\", feature => colorScale(feature.properties[property]))\n      .attr(\"d\", feature => pathGenerator(feature));\n\n\n    // render text\n    svg\n      .selectAll(\".label\")\n      .data([selectedState])\n      .join(\"text\")\n      .attr(\"class\", \"label\")\n      .attr(\"x\", 10)\n      .attr(\"y\", 25);\n  }, [data, dimensions, property, selectedState]);\n\n  return (\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n\nexport default GeoChart;\n"]},"metadata":{},"sourceType":"module"}