{"ast":null,"code":"/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _clamp = _interopRequireDefault(require(\"../clamp\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar normalize = function normalize(result) {\n  var newColumnFlexes = result.newColumnFlexes,\n      newColumnSizes = result.newColumnSizes,\n      maxAvailableWidthForColumns = result.maxAvailableWidthForColumns;\n\n  if (newColumnFlexes && !Object.keys(newColumnFlexes).length) {\n    newColumnFlexes = undefined;\n  }\n\n  if (newColumnSizes && !Object.keys(newColumnSizes).length) {\n    newColumnSizes = undefined;\n  }\n\n  return _objectSpread(_objectSpread({}, result), {}, {\n    newColumnFlexes: newColumnFlexes,\n    newColumnSizes: newColumnSizes,\n    maxAvailableWidthForColumns: maxAvailableWidthForColumns\n  });\n};\n\nvar assignFlexes = function assignFlexes(columns) {\n  return columns.reduce(function (flexes, col) {\n    if (col.computedFlex) {\n      flexes[col.id] = col.computedWidth;\n    }\n\n    return flexes;\n  }, {});\n};\n\nvar clampColSize = function clampColSize(size, col) {\n  return (0, _clamp.default)(size, col.computedMinWidth, col.computedMaxWidth);\n};\n\nvar resizeGroupColumns = function resizeGroupColumns(arg, config) {\n  var totalDiff = arg.diff,\n      maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns,\n      shareSpaceOnResize = arg.shareSpaceOnResize,\n      index = arg.index,\n      groupColumns = arg.groupColumns,\n      columns = arg.columns;\n  columns = columns.map(function (c) {\n    return _objectSpread({}, c);\n  });\n  var newColumnSizes = config.newColumnSizes || {};\n  var columnsMap = columns.reduce(function (map, col) {\n    map[col.id] = col;\n    return map;\n  }, {});\n\n  var newColumnFlexes = _objectSpread(_objectSpread({}, assignFlexes(groupColumns.map(function (colId) {\n    return columnsMap[colId];\n  }))), config.newColumnFlexes);\n\n  while (Math.abs(totalDiff) > 0) {\n    groupColumns.forEach(function (colId, idx) {\n      var col = columnsMap[colId];\n\n      if (col.computedResizable === false) {\n        return;\n      }\n\n      var totalGroupResizableWidth = groupColumns.slice(idx).reduce(function (total, colId) {\n        var col = columnsMap[colId];\n\n        if (col.computedResizable === false) {\n          return total;\n        }\n\n        if (totalDiff > 0 && col.computedMaxWidth && col.computedWidth >= col.computedMaxWidth) {\n          return total;\n        }\n\n        if (totalDiff < 0 && col.computedMinWidth && col.computedWidth <= col.computedMinWidth) {\n          return total;\n        }\n\n        return total + col.computedWidth;\n      }, 0);\n      var diff = totalGroupResizableWidth ? Math.round(col.computedWidth / totalGroupResizableWidth * totalDiff) : 0;\n      var adjustment = 0;\n\n      if (!col.computedFlex) {\n        newColumnSizes[col.id] = col.computedWidth = col.computedWidth + diff;\n      } else {\n        delete newColumnSizes[col.id];\n        newColumnFlexes[col.id] = col.computedWidth = col.computedWidth + diff;\n      }\n\n      if (newColumnSizes[col.id] !== undefined) {\n        var size = newColumnSizes[col.id];\n        var clampedSize = (0, _clamp.default)(size, col.computedMinWidth, col.computedMaxWidth);\n\n        if (clampedSize !== size) {\n          adjustment = size - clampedSize;\n          newColumnSizes[col.id] = clampedSize;\n        }\n      } else if (newColumnFlexes[col.id] !== undefined) {\n        var _size = newColumnFlexes[col.id];\n\n        var _clampedSize = (0, _clamp.default)(_size, col.computedMinWidth, col.computedMaxWidth);\n\n        if (_clampedSize !== _size) {\n          adjustment = _size - _clampedSize;\n          newColumnFlexes[col.id] = col.computedWidth = _clampedSize;\n        }\n      }\n\n      if (diff === 0) {\n        totalDiff = 0;\n      } else {\n        totalDiff = totalDiff - diff + adjustment;\n      }\n    });\n  }\n\n  return normalize(_objectSpread(_objectSpread({}, config), {}, {\n    newColumnSizes: newColumnSizes,\n    newColumnFlexes: newColumnFlexes\n  }));\n};\n\nvar _default = function _default(arg) {\n  var shareSpaceOnResize = arg.shareSpaceOnResize,\n      groupColumns = arg.groupColumns;\n  var result = shareSpaceOnResize ? resizeShareSpace(arg) : resizeNoShareSpace(arg);\n\n  if (groupColumns) {\n    return resizeGroupColumns(arg, result);\n  }\n\n  return result;\n};\n\nexports.default = _default;\n\nvar resizeShareSpace = function resizeShareSpace(arg) {\n  var columns = arg.columns,\n      index = arg.index,\n      diff = arg.diff;\n  var maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns;\n  var colLeft = columns[index];\n  var colsToRight = columns.slice(index + 1);\n  var colRight = colsToRight[0];\n\n  if (!colRight || colRight.computedResizable === false) {\n    return resizeNoShareSpace(arg);\n  }\n\n  if (!colLeft.computedFlex && !colRight.computedFlex) {\n    var _newColumnSizes;\n\n    var newColLeftSize = colLeft.computedWidth + diff;\n    var newColRightSize = clampColSize(colRight.computedWidth - diff, colRight);\n    var remainingDiff = newColRightSize - (colRight.computedWidth - diff);\n    var newColumnSizes = (_newColumnSizes = {}, (0, _defineProperty2.default)(_newColumnSizes, colLeft.id, newColLeftSize + remainingDiff), (0, _defineProperty2.default)(_newColumnSizes, colRight.id, newColRightSize), _newColumnSizes);\n    return normalize({\n      newColumnSizes: newColumnSizes,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n\n  if (colLeft.computedFlex && colRight.computedFlex) {\n    var newColumnFlexes = assignFlexes(columns);\n    newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;\n    newColumnFlexes[colRight.id] = colRight.computedWidth - diff;\n    return normalize({\n      newColumnFlexes: newColumnFlexes,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n\n  if (!colLeft.computedFlex) {\n    var _newColumnFlexes = assignFlexes(columns);\n\n    var _newColumnSizes2 = (0, _defineProperty2.default)({}, colLeft.id, colLeft.computedWidth + diff);\n\n    _newColumnFlexes[colRight.id] = colRight.computedWidth - diff;\n    return normalize({\n      newColumnFlexes: _newColumnFlexes,\n      newColumnSizes: _newColumnSizes2,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n\n  if (!colRight.computedFlex) {\n    var flexCount = columns.reduce(function (count, col) {\n      return count + (col.computedFlex ? 1 : 0);\n    }, 0);\n\n    var _newColumnFlexes2 = assignFlexes(columns);\n\n    var _newColumnSizes4 = (0, _defineProperty2.default)({}, colRight.id, colRight.computedWidth - diff);\n\n    _newColumnFlexes2[colLeft.id] = colLeft.computedWidth + diff;\n\n    if (flexCount === 1 && colLeft.computedFlex) {\n      _newColumnFlexes2 = {};\n    }\n\n    return normalize({\n      newColumnFlexes: _newColumnFlexes2,\n      newColumnSizes: _newColumnSizes4,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n};\n\nvar resizeNoShareSpace = function resizeNoShareSpace(arg) {\n  var columns = arg.columns,\n      index = arg.index,\n      diff = arg.diff,\n      totalComputedWidth = arg.totalComputedWidth;\n  var maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns;\n  var colLeft = columns[index];\n  var colsToRight = columns.slice(index + 1);\n  var colRight = colsToRight[0];\n  var newColumnSizes;\n  var newColumnFlexes;\n  var flexCount = columns.reduce(function (count, col) {\n    return count + (col.computedFlex ? 1 : 0);\n  }, 0);\n\n  if (!colLeft.computedFlex) {\n    if (!flexCount) {\n      newColumnSizes = {};\n\n      if (colLeft.computedResizable !== false) {\n        newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n      }\n\n      return normalize({\n        newColumnSizes: newColumnSizes,\n        newColumnFlexes: undefined,\n        maxAvailableWidthForColumns: maxAvailableWidthForColumns\n      });\n    }\n\n    newColumnSizes = {};\n    newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n    return normalize({\n      newColumnSizes: newColumnSizes,\n      newColumnFlexes: assignFlexes(columns),\n      maxAvailableWidthForColumns: totalComputedWidth + diff\n    });\n  }\n\n  newColumnFlexes = assignFlexes(columns);\n  newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;\n\n  if (flexCount === 1) {\n    if (!colLeft.keepFlex) {\n      delete newColumnFlexes[colLeft.id];\n      newColumnSizes = {};\n      newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n    } else {\n      newColumnFlexes = {};\n      maxAvailableWidthForColumns = totalComputedWidth + diff;\n    }\n  } else {\n    if (!colLeft.keepFlex) {\n      delete newColumnFlexes[colLeft.id];\n      newColumnSizes = {};\n      newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n      maxAvailableWidthForColumns = totalComputedWidth + diff;\n    } else {\n      newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;\n      maxAvailableWidthForColumns = totalComputedWidth + diff;\n    }\n  }\n\n  return normalize({\n    newColumnFlexes: newColumnFlexes,\n    newColumnSizes: newColumnSizes,\n    maxAvailableWidthForColumns: maxAvailableWidthForColumns\n  });\n};","map":{"version":3,"sources":["/Users/kathiavargas/node_modules/@inovua/reactdatagrid-community/utils/columnResize/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_defineProperty2","_clamp","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","normalize","result","newColumnFlexes","newColumnSizes","maxAvailableWidthForColumns","undefined","assignFlexes","columns","reduce","flexes","col","computedFlex","id","computedWidth","clampColSize","size","computedMinWidth","computedMaxWidth","resizeGroupColumns","arg","config","totalDiff","diff","shareSpaceOnResize","index","groupColumns","map","c","columnsMap","colId","Math","abs","idx","computedResizable","totalGroupResizableWidth","slice","total","round","adjustment","clampedSize","_size","_clampedSize","_default","resizeShareSpace","resizeNoShareSpace","colLeft","colsToRight","colRight","_newColumnSizes","newColLeftSize","newColRightSize","remainingDiff","_newColumnFlexes","_newColumnSizes2","flexCount","count","_newColumnFlexes2","_newColumnSizes4","totalComputedWidth","keepFlex"],"mappings":"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","sourcesContent":["/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _clamp = _interopRequireDefault(require(\"../clamp\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar normalize = function normalize(result) {\n  var newColumnFlexes = result.newColumnFlexes,\n      newColumnSizes = result.newColumnSizes,\n      maxAvailableWidthForColumns = result.maxAvailableWidthForColumns;\n\n  if (newColumnFlexes && !Object.keys(newColumnFlexes).length) {\n    newColumnFlexes = undefined;\n  }\n\n  if (newColumnSizes && !Object.keys(newColumnSizes).length) {\n    newColumnSizes = undefined;\n  }\n\n  return _objectSpread(_objectSpread({}, result), {}, {\n    newColumnFlexes: newColumnFlexes,\n    newColumnSizes: newColumnSizes,\n    maxAvailableWidthForColumns: maxAvailableWidthForColumns\n  });\n};\n\nvar assignFlexes = function assignFlexes(columns) {\n  return columns.reduce(function (flexes, col) {\n    if (col.computedFlex) {\n      flexes[col.id] = col.computedWidth;\n    }\n\n    return flexes;\n  }, {});\n};\n\nvar clampColSize = function clampColSize(size, col) {\n  return (0, _clamp.default)(size, col.computedMinWidth, col.computedMaxWidth);\n};\n\nvar resizeGroupColumns = function resizeGroupColumns(arg, config) {\n  var totalDiff = arg.diff,\n      maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns,\n      shareSpaceOnResize = arg.shareSpaceOnResize,\n      index = arg.index,\n      groupColumns = arg.groupColumns,\n      columns = arg.columns;\n  columns = columns.map(function (c) {\n    return _objectSpread({}, c);\n  });\n  var newColumnSizes = config.newColumnSizes || {};\n  var columnsMap = columns.reduce(function (map, col) {\n    map[col.id] = col;\n    return map;\n  }, {});\n\n  var newColumnFlexes = _objectSpread(_objectSpread({}, assignFlexes(groupColumns.map(function (colId) {\n    return columnsMap[colId];\n  }))), config.newColumnFlexes);\n\n  while (Math.abs(totalDiff) > 0) {\n    groupColumns.forEach(function (colId, idx) {\n      var col = columnsMap[colId];\n\n      if (col.computedResizable === false) {\n        return;\n      }\n\n      var totalGroupResizableWidth = groupColumns.slice(idx).reduce(function (total, colId) {\n        var col = columnsMap[colId];\n\n        if (col.computedResizable === false) {\n          return total;\n        }\n\n        if (totalDiff > 0 && col.computedMaxWidth && col.computedWidth >= col.computedMaxWidth) {\n          return total;\n        }\n\n        if (totalDiff < 0 && col.computedMinWidth && col.computedWidth <= col.computedMinWidth) {\n          return total;\n        }\n\n        return total + col.computedWidth;\n      }, 0);\n      var diff = totalGroupResizableWidth ? Math.round(col.computedWidth / totalGroupResizableWidth * totalDiff) : 0;\n      var adjustment = 0;\n\n      if (!col.computedFlex) {\n        newColumnSizes[col.id] = col.computedWidth = col.computedWidth + diff;\n      } else {\n        delete newColumnSizes[col.id];\n        newColumnFlexes[col.id] = col.computedWidth = col.computedWidth + diff;\n      }\n\n      if (newColumnSizes[col.id] !== undefined) {\n        var size = newColumnSizes[col.id];\n        var clampedSize = (0, _clamp.default)(size, col.computedMinWidth, col.computedMaxWidth);\n\n        if (clampedSize !== size) {\n          adjustment = size - clampedSize;\n          newColumnSizes[col.id] = clampedSize;\n        }\n      } else if (newColumnFlexes[col.id] !== undefined) {\n        var _size = newColumnFlexes[col.id];\n\n        var _clampedSize = (0, _clamp.default)(_size, col.computedMinWidth, col.computedMaxWidth);\n\n        if (_clampedSize !== _size) {\n          adjustment = _size - _clampedSize;\n          newColumnFlexes[col.id] = col.computedWidth = _clampedSize;\n        }\n      }\n\n      if (diff === 0) {\n        totalDiff = 0;\n      } else {\n        totalDiff = totalDiff - diff + adjustment;\n      }\n    });\n  }\n\n  return normalize(_objectSpread(_objectSpread({}, config), {}, {\n    newColumnSizes: newColumnSizes,\n    newColumnFlexes: newColumnFlexes\n  }));\n};\n\nvar _default = function _default(arg) {\n  var shareSpaceOnResize = arg.shareSpaceOnResize,\n      groupColumns = arg.groupColumns;\n  var result = shareSpaceOnResize ? resizeShareSpace(arg) : resizeNoShareSpace(arg);\n\n  if (groupColumns) {\n    return resizeGroupColumns(arg, result);\n  }\n\n  return result;\n};\n\nexports.default = _default;\n\nvar resizeShareSpace = function resizeShareSpace(arg) {\n  var columns = arg.columns,\n      index = arg.index,\n      diff = arg.diff;\n  var maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns;\n  var colLeft = columns[index];\n  var colsToRight = columns.slice(index + 1);\n  var colRight = colsToRight[0];\n\n  if (!colRight || colRight.computedResizable === false) {\n    return resizeNoShareSpace(arg);\n  }\n\n  if (!colLeft.computedFlex && !colRight.computedFlex) {\n    var _newColumnSizes;\n\n    var newColLeftSize = colLeft.computedWidth + diff;\n    var newColRightSize = clampColSize(colRight.computedWidth - diff, colRight);\n    var remainingDiff = newColRightSize - (colRight.computedWidth - diff);\n    var newColumnSizes = (_newColumnSizes = {}, (0, _defineProperty2.default)(_newColumnSizes, colLeft.id, newColLeftSize + remainingDiff), (0, _defineProperty2.default)(_newColumnSizes, colRight.id, newColRightSize), _newColumnSizes);\n    return normalize({\n      newColumnSizes: newColumnSizes,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n\n  if (colLeft.computedFlex && colRight.computedFlex) {\n    var newColumnFlexes = assignFlexes(columns);\n    newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;\n    newColumnFlexes[colRight.id] = colRight.computedWidth - diff;\n    return normalize({\n      newColumnFlexes: newColumnFlexes,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n\n  if (!colLeft.computedFlex) {\n    var _newColumnFlexes = assignFlexes(columns);\n\n    var _newColumnSizes2 = (0, _defineProperty2.default)({}, colLeft.id, colLeft.computedWidth + diff);\n\n    _newColumnFlexes[colRight.id] = colRight.computedWidth - diff;\n    return normalize({\n      newColumnFlexes: _newColumnFlexes,\n      newColumnSizes: _newColumnSizes2,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n\n  if (!colRight.computedFlex) {\n    var flexCount = columns.reduce(function (count, col) {\n      return count + (col.computedFlex ? 1 : 0);\n    }, 0);\n\n    var _newColumnFlexes2 = assignFlexes(columns);\n\n    var _newColumnSizes4 = (0, _defineProperty2.default)({}, colRight.id, colRight.computedWidth - diff);\n\n    _newColumnFlexes2[colLeft.id] = colLeft.computedWidth + diff;\n\n    if (flexCount === 1 && colLeft.computedFlex) {\n      _newColumnFlexes2 = {};\n    }\n\n    return normalize({\n      newColumnFlexes: _newColumnFlexes2,\n      newColumnSizes: _newColumnSizes4,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n};\n\nvar resizeNoShareSpace = function resizeNoShareSpace(arg) {\n  var columns = arg.columns,\n      index = arg.index,\n      diff = arg.diff,\n      totalComputedWidth = arg.totalComputedWidth;\n  var maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns;\n  var colLeft = columns[index];\n  var colsToRight = columns.slice(index + 1);\n  var colRight = colsToRight[0];\n  var newColumnSizes;\n  var newColumnFlexes;\n  var flexCount = columns.reduce(function (count, col) {\n    return count + (col.computedFlex ? 1 : 0);\n  }, 0);\n\n  if (!colLeft.computedFlex) {\n    if (!flexCount) {\n      newColumnSizes = {};\n\n      if (colLeft.computedResizable !== false) {\n        newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n      }\n\n      return normalize({\n        newColumnSizes: newColumnSizes,\n        newColumnFlexes: undefined,\n        maxAvailableWidthForColumns: maxAvailableWidthForColumns\n      });\n    }\n\n    newColumnSizes = {};\n    newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n    return normalize({\n      newColumnSizes: newColumnSizes,\n      newColumnFlexes: assignFlexes(columns),\n      maxAvailableWidthForColumns: totalComputedWidth + diff\n    });\n  }\n\n  newColumnFlexes = assignFlexes(columns);\n  newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;\n\n  if (flexCount === 1) {\n    if (!colLeft.keepFlex) {\n      delete newColumnFlexes[colLeft.id];\n      newColumnSizes = {};\n      newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n    } else {\n      newColumnFlexes = {};\n      maxAvailableWidthForColumns = totalComputedWidth + diff;\n    }\n  } else {\n    if (!colLeft.keepFlex) {\n      delete newColumnFlexes[colLeft.id];\n      newColumnSizes = {};\n      newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n      maxAvailableWidthForColumns = totalComputedWidth + diff;\n    } else {\n      newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;\n      maxAvailableWidthForColumns = totalComputedWidth + diff;\n    }\n  }\n\n  return normalize({\n    newColumnFlexes: newColumnFlexes,\n    newColumnSizes: newColumnSizes,\n    maxAvailableWidthForColumns: maxAvailableWidthForColumns\n  });\n};"]},"metadata":{},"sourceType":"script"}