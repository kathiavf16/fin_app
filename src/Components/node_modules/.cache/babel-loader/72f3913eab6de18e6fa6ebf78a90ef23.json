{"ast":null,"code":"/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _region = _interopRequireDefault(require(\"../region\"));\n\nfunction ALIGN_TO_NORMALIZED(sourceRegion, targetRegion, positions, config) {\n  targetRegion = _region.default.from(targetRegion);\n  config = config || {};\n  var constrainTo = config.constrain,\n      syncOption = config.sync,\n      offsets = config.offset || [],\n      syncWidth = false,\n      syncHeight = false,\n      sourceClone = sourceRegion.clone();\n\n  if (!Array.isArray(positions)) {\n    positions = positions ? [positions] : [];\n  }\n\n  if (!Array.isArray(offsets)) {\n    offsets = offsets ? [offsets] : [];\n  }\n\n  if (constrainTo) {\n    constrainTo = constrainTo === true ? _region.default.getDocRegion() : constrainTo.getRegion();\n  }\n\n  if (syncOption) {\n    if (syncOption.size) {\n      syncWidth = true;\n      syncHeight = true;\n    } else {\n      syncWidth = syncOption === true ? true : syncOption.width || false;\n      syncHeight = syncOption === true ? true : syncOption.height || false;\n    }\n  }\n\n  if (syncWidth) {\n    sourceClone.setWidth(targetRegion.getWidth());\n  }\n\n  if (syncHeight) {\n    sourceClone.setHeight(targetRegion.getHeight());\n  }\n\n  var offset,\n      i = 0,\n      len = positions.length,\n      pos,\n      intersection,\n      itArea,\n      maxArea = -1,\n      maxAreaIndex = -1;\n\n  for (; i < len; i++) {\n    pos = positions[i];\n    offset = offsets[i];\n    sourceClone.alignToRegion(targetRegion, pos);\n\n    if (offset) {\n      if (!Array.isArray(offset)) {\n        offset = offsets[i] = [offset.x || offset.left, offset.y || offset.top];\n      }\n\n      sourceClone.shift({\n        left: offset[0],\n        top: offset[1]\n      });\n    }\n\n    if (constrainTo) {\n      intersection = sourceClone.getIntersection(constrainTo);\n\n      if (intersection && intersection.equals(sourceClone)) {\n        sourceRegion.set(sourceClone);\n        return pos;\n      } else {\n        if (intersection && (itArea = intersection.getArea()) > maxArea) {\n          maxArea = itArea;\n          maxAreaIndex = i;\n        }\n      }\n    } else {\n      sourceRegion.set(sourceClone);\n      return pos;\n    }\n  }\n\n  if (~maxAreaIndex) {\n    pos = positions[maxAreaIndex];\n    offset = offsets[maxAreaIndex];\n    sourceClone.alignToRegion(targetRegion, pos);\n\n    if (offset) {\n      sourceClone.shift({\n        left: offset[0],\n        top: offset[1]\n      });\n    }\n\n    intersection = sourceClone.getIntersection(constrainTo);\n    sourceClone.setRegion(intersection);\n    sourceClone.alignToRegion(targetRegion, pos);\n\n    if (offset) {\n      sourceClone.shift({\n        left: offset[0],\n        top: offset[1]\n      });\n    }\n\n    sourceRegion.set(sourceClone);\n    return pos;\n  }\n}\n\nvar _default = ALIGN_TO_NORMALIZED;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kathiavargas/node_modules/@inovua/reactdatagrid-community/packages/region-align/alignToNormalized.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_region","ALIGN_TO_NORMALIZED","sourceRegion","targetRegion","positions","config","from","constrainTo","constrain","syncOption","sync","offsets","offset","syncWidth","syncHeight","sourceClone","clone","Array","isArray","getDocRegion","getRegion","size","width","height","setWidth","getWidth","setHeight","getHeight","i","len","length","pos","intersection","itArea","maxArea","maxAreaIndex","alignToRegion","x","left","y","top","shift","getIntersection","equals","set","getArea","setRegion","_default"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,OAAO,GAAGP,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAApC;;AAEA,SAASO,mBAAT,CAA6BC,YAA7B,EAA2CC,YAA3C,EAAyDC,SAAzD,EAAoEC,MAApE,EAA4E;AAC1EF,EAAAA,YAAY,GAAGH,OAAO,CAACD,OAAR,CAAgBO,IAAhB,CAAqBH,YAArB,CAAf;AACAE,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AACA,MAAIE,WAAW,GAAGF,MAAM,CAACG,SAAzB;AAAA,MACIC,UAAU,GAAGJ,MAAM,CAACK,IADxB;AAAA,MAEIC,OAAO,GAAGN,MAAM,CAACO,MAAP,IAAiB,EAF/B;AAAA,MAGIC,SAAS,GAAG,KAHhB;AAAA,MAIIC,UAAU,GAAG,KAJjB;AAAA,MAKIC,WAAW,GAAGb,YAAY,CAACc,KAAb,EALlB;;AAOA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcd,SAAd,CAAL,EAA+B;AAC7BA,IAAAA,SAAS,GAAGA,SAAS,GAAG,CAACA,SAAD,CAAH,GAAiB,EAAtC;AACD;;AAED,MAAI,CAACa,KAAK,CAACC,OAAN,CAAcP,OAAd,CAAL,EAA6B;AAC3BA,IAAAA,OAAO,GAAGA,OAAO,GAAG,CAACA,OAAD,CAAH,GAAe,EAAhC;AACD;;AAED,MAAIJ,WAAJ,EAAiB;AACfA,IAAAA,WAAW,GAAGA,WAAW,KAAK,IAAhB,GAAuBP,OAAO,CAACD,OAAR,CAAgBoB,YAAhB,EAAvB,GAAwDZ,WAAW,CAACa,SAAZ,EAAtE;AACD;;AAED,MAAIX,UAAJ,EAAgB;AACd,QAAIA,UAAU,CAACY,IAAf,EAAqB;AACnBR,MAAAA,SAAS,GAAG,IAAZ;AACAC,MAAAA,UAAU,GAAG,IAAb;AACD,KAHD,MAGO;AACLD,MAAAA,SAAS,GAAGJ,UAAU,KAAK,IAAf,GAAsB,IAAtB,GAA6BA,UAAU,CAACa,KAAX,IAAoB,KAA7D;AACAR,MAAAA,UAAU,GAAGL,UAAU,KAAK,IAAf,GAAsB,IAAtB,GAA6BA,UAAU,CAACc,MAAX,IAAqB,KAA/D;AACD;AACF;;AAED,MAAIV,SAAJ,EAAe;AACbE,IAAAA,WAAW,CAACS,QAAZ,CAAqBrB,YAAY,CAACsB,QAAb,EAArB;AACD;;AAED,MAAIX,UAAJ,EAAgB;AACdC,IAAAA,WAAW,CAACW,SAAZ,CAAsBvB,YAAY,CAACwB,SAAb,EAAtB;AACD;;AAED,MAAIf,MAAJ;AAAA,MACIgB,CAAC,GAAG,CADR;AAAA,MAEIC,GAAG,GAAGzB,SAAS,CAAC0B,MAFpB;AAAA,MAGIC,GAHJ;AAAA,MAIIC,YAJJ;AAAA,MAKIC,MALJ;AAAA,MAMIC,OAAO,GAAG,CAAC,CANf;AAAA,MAOIC,YAAY,GAAG,CAAC,CAPpB;;AASA,SAAOP,CAAC,GAAGC,GAAX,EAAgBD,CAAC,EAAjB,EAAqB;AACnBG,IAAAA,GAAG,GAAG3B,SAAS,CAACwB,CAAD,CAAf;AACAhB,IAAAA,MAAM,GAAGD,OAAO,CAACiB,CAAD,CAAhB;AACAb,IAAAA,WAAW,CAACqB,aAAZ,CAA0BjC,YAA1B,EAAwC4B,GAAxC;;AAEA,QAAInB,MAAJ,EAAY;AACV,UAAI,CAACK,KAAK,CAACC,OAAN,CAAcN,MAAd,CAAL,EAA4B;AAC1BA,QAAAA,MAAM,GAAGD,OAAO,CAACiB,CAAD,CAAP,GAAa,CAAChB,MAAM,CAACyB,CAAP,IAAYzB,MAAM,CAAC0B,IAApB,EAA0B1B,MAAM,CAAC2B,CAAP,IAAY3B,MAAM,CAAC4B,GAA7C,CAAtB;AACD;;AAEDzB,MAAAA,WAAW,CAAC0B,KAAZ,CAAkB;AAChBH,QAAAA,IAAI,EAAE1B,MAAM,CAAC,CAAD,CADI;AAEhB4B,QAAAA,GAAG,EAAE5B,MAAM,CAAC,CAAD;AAFK,OAAlB;AAID;;AAED,QAAIL,WAAJ,EAAiB;AACfyB,MAAAA,YAAY,GAAGjB,WAAW,CAAC2B,eAAZ,CAA4BnC,WAA5B,CAAf;;AAEA,UAAIyB,YAAY,IAAIA,YAAY,CAACW,MAAb,CAAoB5B,WAApB,CAApB,EAAsD;AACpDb,QAAAA,YAAY,CAAC0C,GAAb,CAAiB7B,WAAjB;AACA,eAAOgB,GAAP;AACD,OAHD,MAGO;AACL,YAAIC,YAAY,IAAI,CAACC,MAAM,GAAGD,YAAY,CAACa,OAAb,EAAV,IAAoCX,OAAxD,EAAiE;AAC/DA,UAAAA,OAAO,GAAGD,MAAV;AACAE,UAAAA,YAAY,GAAGP,CAAf;AACD;AACF;AACF,KAZD,MAYO;AACL1B,MAAAA,YAAY,CAAC0C,GAAb,CAAiB7B,WAAjB;AACA,aAAOgB,GAAP;AACD;AACF;;AAED,MAAI,CAACI,YAAL,EAAmB;AACjBJ,IAAAA,GAAG,GAAG3B,SAAS,CAAC+B,YAAD,CAAf;AACAvB,IAAAA,MAAM,GAAGD,OAAO,CAACwB,YAAD,CAAhB;AACApB,IAAAA,WAAW,CAACqB,aAAZ,CAA0BjC,YAA1B,EAAwC4B,GAAxC;;AAEA,QAAInB,MAAJ,EAAY;AACVG,MAAAA,WAAW,CAAC0B,KAAZ,CAAkB;AAChBH,QAAAA,IAAI,EAAE1B,MAAM,CAAC,CAAD,CADI;AAEhB4B,QAAAA,GAAG,EAAE5B,MAAM,CAAC,CAAD;AAFK,OAAlB;AAID;;AAEDoB,IAAAA,YAAY,GAAGjB,WAAW,CAAC2B,eAAZ,CAA4BnC,WAA5B,CAAf;AACAQ,IAAAA,WAAW,CAAC+B,SAAZ,CAAsBd,YAAtB;AACAjB,IAAAA,WAAW,CAACqB,aAAZ,CAA0BjC,YAA1B,EAAwC4B,GAAxC;;AAEA,QAAInB,MAAJ,EAAY;AACVG,MAAAA,WAAW,CAAC0B,KAAZ,CAAkB;AAChBH,QAAAA,IAAI,EAAE1B,MAAM,CAAC,CAAD,CADI;AAEhB4B,QAAAA,GAAG,EAAE5B,MAAM,CAAC,CAAD;AAFK,OAAlB;AAID;;AAEDV,IAAAA,YAAY,CAAC0C,GAAb,CAAiB7B,WAAjB;AACA,WAAOgB,GAAP;AACD;AACF;;AAED,IAAIgB,QAAQ,GAAG9C,mBAAf;AACAJ,OAAO,CAACE,OAAR,GAAkBgD,QAAlB","sourcesContent":["/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _region = _interopRequireDefault(require(\"../region\"));\n\nfunction ALIGN_TO_NORMALIZED(sourceRegion, targetRegion, positions, config) {\n  targetRegion = _region.default.from(targetRegion);\n  config = config || {};\n  var constrainTo = config.constrain,\n      syncOption = config.sync,\n      offsets = config.offset || [],\n      syncWidth = false,\n      syncHeight = false,\n      sourceClone = sourceRegion.clone();\n\n  if (!Array.isArray(positions)) {\n    positions = positions ? [positions] : [];\n  }\n\n  if (!Array.isArray(offsets)) {\n    offsets = offsets ? [offsets] : [];\n  }\n\n  if (constrainTo) {\n    constrainTo = constrainTo === true ? _region.default.getDocRegion() : constrainTo.getRegion();\n  }\n\n  if (syncOption) {\n    if (syncOption.size) {\n      syncWidth = true;\n      syncHeight = true;\n    } else {\n      syncWidth = syncOption === true ? true : syncOption.width || false;\n      syncHeight = syncOption === true ? true : syncOption.height || false;\n    }\n  }\n\n  if (syncWidth) {\n    sourceClone.setWidth(targetRegion.getWidth());\n  }\n\n  if (syncHeight) {\n    sourceClone.setHeight(targetRegion.getHeight());\n  }\n\n  var offset,\n      i = 0,\n      len = positions.length,\n      pos,\n      intersection,\n      itArea,\n      maxArea = -1,\n      maxAreaIndex = -1;\n\n  for (; i < len; i++) {\n    pos = positions[i];\n    offset = offsets[i];\n    sourceClone.alignToRegion(targetRegion, pos);\n\n    if (offset) {\n      if (!Array.isArray(offset)) {\n        offset = offsets[i] = [offset.x || offset.left, offset.y || offset.top];\n      }\n\n      sourceClone.shift({\n        left: offset[0],\n        top: offset[1]\n      });\n    }\n\n    if (constrainTo) {\n      intersection = sourceClone.getIntersection(constrainTo);\n\n      if (intersection && intersection.equals(sourceClone)) {\n        sourceRegion.set(sourceClone);\n        return pos;\n      } else {\n        if (intersection && (itArea = intersection.getArea()) > maxArea) {\n          maxArea = itArea;\n          maxAreaIndex = i;\n        }\n      }\n    } else {\n      sourceRegion.set(sourceClone);\n      return pos;\n    }\n  }\n\n  if (~maxAreaIndex) {\n    pos = positions[maxAreaIndex];\n    offset = offsets[maxAreaIndex];\n    sourceClone.alignToRegion(targetRegion, pos);\n\n    if (offset) {\n      sourceClone.shift({\n        left: offset[0],\n        top: offset[1]\n      });\n    }\n\n    intersection = sourceClone.getIntersection(constrainTo);\n    sourceClone.setRegion(intersection);\n    sourceClone.alignToRegion(targetRegion, pos);\n\n    if (offset) {\n      sourceClone.shift({\n        left: offset[0],\n        top: offset[1]\n      });\n    }\n\n    sourceRegion.set(sourceClone);\n    return pos;\n  }\n}\n\nvar _default = ALIGN_TO_NORMALIZED;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}