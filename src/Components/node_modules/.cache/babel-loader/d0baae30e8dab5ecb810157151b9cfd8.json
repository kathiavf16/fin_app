{"ast":null,"code":"/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regionAlign = _interopRequireDefault(require(\"../../packages/region-align\"));\n\nvar _assign = _interopRequireDefault(require(\"../assign\"));\n\nvar _getPositionOffsets = _interopRequireDefault(require(\"./getPositionOffsets\"));\n\nvar _positionsMap = _interopRequireDefault(require(\"./positionsMap\"));\n\nvar _getArrowPosition = _interopRequireDefault(require(\"./getArrowPosition\"));\n\nvar _getConstrainRegion = _interopRequireDefault(require(\"./getConstrainRegion\"));\n\nvar _isPositionBottom = _interopRequireDefault(require(\"./isPositionBottom\"));\n\nvar posiblePositions = Object.keys(_positionsMap.default);\n\nfunction getPosition(_ref) {\n  var _ref$constrainTo = _ref.constrainTo,\n      constrainTo = _ref$constrainTo === void 0 ? true : _ref$constrainTo,\n      targetNode = _ref.targetNode,\n      overlayNode = _ref.overlayNode,\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === void 0 ? 0 : _ref$offset,\n      _ref$positions = _ref.positions,\n      positions = _ref$positions === void 0 ? posiblePositions : _ref$positions,\n      _ref$relativeToViewpo = _ref.relativeToViewport,\n      relativeToViewport = _ref$relativeToViewpo === void 0 ? true : _ref$relativeToViewpo,\n      _ref$arrowSize = _ref.arrowSize,\n      arrowSize = _ref$arrowSize === void 0 ? 10 : _ref$arrowSize,\n      _ref$adjustOnPosition = _ref.adjustOnPositionBottom,\n      adjustOnPositionBottom = _ref$adjustOnPosition === void 0 ? true : _ref$adjustOnPosition,\n      _ref$showArrow = _ref.showArrow,\n      showArrow = _ref$showArrow === void 0 ? true : _ref$showArrow;\n\n  if (!constrainTo || !overlayNode || !targetNode) {\n    return null;\n  }\n\n  var constrain = (0, _getConstrainRegion.default)(constrainTo, targetNode);\n\n  var overlayRegion = _regionAlign.default.from(overlayNode);\n\n  var alignRegion = _regionAlign.default.from(targetNode);\n\n  var newRegion = overlayRegion.clone();\n  var positionsNormalized = positions.map(function (position) {\n    var normalizedPosition;\n\n    if (_positionsMap.default[position]) {\n      normalizedPosition = _positionsMap.default[position].position;\n    } else {\n      normalizedPosition = position.position || position;\n    }\n\n    return normalizedPosition;\n  });\n  var positionsOffsets = (0, _getPositionOffsets.default)(positions, offset);\n  var positionsOffsetsClone = positionsOffsets.map(function (offset) {\n    return (0, _assign.default)({}, offset);\n  });\n  var succesfullPosition = newRegion.alignTo(alignRegion, positionsNormalized, {\n    constrain: constrain,\n    offset: positionsOffsetsClone\n  });\n  var constrainedWidth = newRegion.getWidth() != overlayRegion.getWidth();\n  var constrainedHeight = newRegion.getHeight() != overlayRegion.getHeight();\n  var arrowConfig = null;\n\n  if (showArrow) {\n    arrowConfig = (0, _getArrowPosition.default)({\n      arrowSize: arrowSize,\n      overlayRegion: newRegion,\n      targetRegion: alignRegion,\n      position: succesfullPosition\n    });\n  }\n\n  var position = {\n    top: newRegion.top,\n    left: newRegion.left\n  };\n\n  if (!relativeToViewport && overlayNode.offsetParent) {\n    var offsetParentRegion = _regionAlign.default.from(overlayNode.offsetParent);\n\n    position.left -= offsetParentRegion.left;\n    position.top -= offsetParentRegion.top;\n  }\n\n  if ((0, _isPositionBottom.default)(succesfullPosition) && adjustOnPositionBottom) {\n    position.bottom = -(overlayRegion.height + (alignRegion.height - position.top));\n    delete position.top;\n  }\n\n  return {\n    alignRegion: alignRegion,\n    constrainedHeight: constrainedHeight,\n    constrainedWidth: constrainedWidth,\n    constrained: constrainedHeight || constrainedWidth,\n    positionRegion: newRegion,\n    arrowConfig: arrowConfig,\n    position: position,\n    succesfullPosition: succesfullPosition\n  };\n}\n\nvar _default = getPosition;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kathiavargas/node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/getPosition.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_regionAlign","_assign","_getPositionOffsets","_positionsMap","_getArrowPosition","_getConstrainRegion","_isPositionBottom","posiblePositions","keys","getPosition","_ref","_ref$constrainTo","constrainTo","targetNode","overlayNode","_ref$offset","offset","_ref$positions","positions","_ref$relativeToViewpo","relativeToViewport","_ref$arrowSize","arrowSize","_ref$adjustOnPosition","adjustOnPositionBottom","_ref$showArrow","showArrow","constrain","overlayRegion","from","alignRegion","newRegion","clone","positionsNormalized","map","position","normalizedPosition","positionsOffsets","positionsOffsetsClone","succesfullPosition","alignTo","constrainedWidth","getWidth","constrainedHeight","getHeight","arrowConfig","targetRegion","top","left","offsetParent","offsetParentRegion","bottom","height","constrained","positionRegion","_default"],"mappings":"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","sourcesContent":["/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regionAlign = _interopRequireDefault(require(\"../../packages/region-align\"));\n\nvar _assign = _interopRequireDefault(require(\"../assign\"));\n\nvar _getPositionOffsets = _interopRequireDefault(require(\"./getPositionOffsets\"));\n\nvar _positionsMap = _interopRequireDefault(require(\"./positionsMap\"));\n\nvar _getArrowPosition = _interopRequireDefault(require(\"./getArrowPosition\"));\n\nvar _getConstrainRegion = _interopRequireDefault(require(\"./getConstrainRegion\"));\n\nvar _isPositionBottom = _interopRequireDefault(require(\"./isPositionBottom\"));\n\nvar posiblePositions = Object.keys(_positionsMap.default);\n\nfunction getPosition(_ref) {\n  var _ref$constrainTo = _ref.constrainTo,\n      constrainTo = _ref$constrainTo === void 0 ? true : _ref$constrainTo,\n      targetNode = _ref.targetNode,\n      overlayNode = _ref.overlayNode,\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === void 0 ? 0 : _ref$offset,\n      _ref$positions = _ref.positions,\n      positions = _ref$positions === void 0 ? posiblePositions : _ref$positions,\n      _ref$relativeToViewpo = _ref.relativeToViewport,\n      relativeToViewport = _ref$relativeToViewpo === void 0 ? true : _ref$relativeToViewpo,\n      _ref$arrowSize = _ref.arrowSize,\n      arrowSize = _ref$arrowSize === void 0 ? 10 : _ref$arrowSize,\n      _ref$adjustOnPosition = _ref.adjustOnPositionBottom,\n      adjustOnPositionBottom = _ref$adjustOnPosition === void 0 ? true : _ref$adjustOnPosition,\n      _ref$showArrow = _ref.showArrow,\n      showArrow = _ref$showArrow === void 0 ? true : _ref$showArrow;\n\n  if (!constrainTo || !overlayNode || !targetNode) {\n    return null;\n  }\n\n  var constrain = (0, _getConstrainRegion.default)(constrainTo, targetNode);\n\n  var overlayRegion = _regionAlign.default.from(overlayNode);\n\n  var alignRegion = _regionAlign.default.from(targetNode);\n\n  var newRegion = overlayRegion.clone();\n  var positionsNormalized = positions.map(function (position) {\n    var normalizedPosition;\n\n    if (_positionsMap.default[position]) {\n      normalizedPosition = _positionsMap.default[position].position;\n    } else {\n      normalizedPosition = position.position || position;\n    }\n\n    return normalizedPosition;\n  });\n  var positionsOffsets = (0, _getPositionOffsets.default)(positions, offset);\n  var positionsOffsetsClone = positionsOffsets.map(function (offset) {\n    return (0, _assign.default)({}, offset);\n  });\n  var succesfullPosition = newRegion.alignTo(alignRegion, positionsNormalized, {\n    constrain: constrain,\n    offset: positionsOffsetsClone\n  });\n  var constrainedWidth = newRegion.getWidth() != overlayRegion.getWidth();\n  var constrainedHeight = newRegion.getHeight() != overlayRegion.getHeight();\n  var arrowConfig = null;\n\n  if (showArrow) {\n    arrowConfig = (0, _getArrowPosition.default)({\n      arrowSize: arrowSize,\n      overlayRegion: newRegion,\n      targetRegion: alignRegion,\n      position: succesfullPosition\n    });\n  }\n\n  var position = {\n    top: newRegion.top,\n    left: newRegion.left\n  };\n\n  if (!relativeToViewport && overlayNode.offsetParent) {\n    var offsetParentRegion = _regionAlign.default.from(overlayNode.offsetParent);\n\n    position.left -= offsetParentRegion.left;\n    position.top -= offsetParentRegion.top;\n  }\n\n  if ((0, _isPositionBottom.default)(succesfullPosition) && adjustOnPositionBottom) {\n    position.bottom = -(overlayRegion.height + (alignRegion.height - position.top));\n    delete position.top;\n  }\n\n  return {\n    alignRegion: alignRegion,\n    constrainedHeight: constrainedHeight,\n    constrainedWidth: constrainedWidth,\n    constrained: constrainedHeight || constrainedWidth,\n    positionRegion: newRegion,\n    arrowConfig: arrowConfig,\n    position: position,\n    succesfullPosition: succesfullPosition\n  };\n}\n\nvar _default = getPosition;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}