{"ast":null,"code":"/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = convertStringToNumber;\n\nfunction convertStringToNumber(stringToConvert) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _props$decimalDelimit = props.decimalDelimiter,\n      decimalDelimiter = _props$decimalDelimit === void 0 ? '.' : _props$decimalDelimit,\n      _props$digitGroupDeli = props.digitGroupDelimiter,\n      digitGroupDelimiter = _props$digitGroupDeli === void 0 ? ',' : _props$digitGroupDeli,\n      _props$min = props.min,\n      min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min,\n      _props$max = props.max,\n      max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max;\n\n  if (digitGroupDelimiter == '') {\n    return ',';\n  }\n\n  if (!stringToConvert) {\n    return NaN;\n  }\n\n  var cleanedString = stringToConvert;\n  var decmialPosition = cleanedString.lastIndexOf(decimalDelimiter);\n\n  if (decmialPosition !== -1 && decimalDelimiter !== '.') {\n    cleanedString = [cleanedString.substring(0, decmialPosition).replace(new RegExp(\"[\\\\\".concat(digitGroupDelimiter, \"]\"), 'g'), ''), cleanedString.substring(decmialPosition).replace(new RegExp(\"[\\\\\".concat(decimalDelimiter, \"]\"), 'g'), '.')].join('');\n  } else {\n    cleanedString = cleanedString.replace(new RegExp(\"[\\\\\".concat(digitGroupDelimiter, \"]\"), 'g'), '');\n  }\n\n  var result = parseFloat(cleanedString, 10);\n\n  if (result < min) {\n    result = min;\n  }\n\n  if (result > max) {\n    result = max;\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/kathiavargas/node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/convert-string-to-number.js"],"names":["Object","defineProperty","exports","value","default","convertStringToNumber","stringToConvert","props","arguments","length","undefined","_props$decimalDelimit","decimalDelimiter","_props$digitGroupDeli","digitGroupDelimiter","_props$min","min","Number","MIN_SAFE_INTEGER","_props$max","max","MAX_SAFE_INTEGER","NaN","cleanedString","decmialPosition","lastIndexOf","substring","replace","RegExp","concat","join","result","parseFloat"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,qBAAlB;;AAEA,SAASA,qBAAT,CAA+BC,eAA/B,EAAgD;AAC9C,MAAIC,KAAK,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AACA,MAAIG,qBAAqB,GAAGJ,KAAK,CAACK,gBAAlC;AAAA,MACIA,gBAAgB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,GAAnC,GAAyCA,qBADhE;AAAA,MAEIE,qBAAqB,GAAGN,KAAK,CAACO,mBAFlC;AAAA,MAGIA,mBAAmB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,GAAnC,GAAyCA,qBAHnE;AAAA,MAIIE,UAAU,GAAGR,KAAK,CAACS,GAJvB;AAAA,MAKIA,GAAG,GAAGD,UAAU,KAAK,KAAK,CAApB,GAAwBE,MAAM,CAACC,gBAA/B,GAAkDH,UAL5D;AAAA,MAMII,UAAU,GAAGZ,KAAK,CAACa,GANvB;AAAA,MAOIA,GAAG,GAAGD,UAAU,KAAK,KAAK,CAApB,GAAwBF,MAAM,CAACI,gBAA/B,GAAkDF,UAP5D;;AASA,MAAIL,mBAAmB,IAAI,EAA3B,EAA+B;AAC7B,WAAO,GAAP;AACD;;AAED,MAAI,CAACR,eAAL,EAAsB;AACpB,WAAOgB,GAAP;AACD;;AAED,MAAIC,aAAa,GAAGjB,eAApB;AACA,MAAIkB,eAAe,GAAGD,aAAa,CAACE,WAAd,CAA0Bb,gBAA1B,CAAtB;;AAEA,MAAIY,eAAe,KAAK,CAAC,CAArB,IAA0BZ,gBAAgB,KAAK,GAAnD,EAAwD;AACtDW,IAAAA,aAAa,GAAG,CAACA,aAAa,CAACG,SAAd,CAAwB,CAAxB,EAA2BF,eAA3B,EAA4CG,OAA5C,CAAoD,IAAIC,MAAJ,CAAW,MAAMC,MAAN,CAAaf,mBAAb,EAAkC,GAAlC,CAAX,EAAmD,GAAnD,CAApD,EAA6G,EAA7G,CAAD,EAAmHS,aAAa,CAACG,SAAd,CAAwBF,eAAxB,EAAyCG,OAAzC,CAAiD,IAAIC,MAAJ,CAAW,MAAMC,MAAN,CAAajB,gBAAb,EAA+B,GAA/B,CAAX,EAAgD,GAAhD,CAAjD,EAAuG,GAAvG,CAAnH,EAAgOkB,IAAhO,CAAqO,EAArO,CAAhB;AACD,GAFD,MAEO;AACLP,IAAAA,aAAa,GAAGA,aAAa,CAACI,OAAd,CAAsB,IAAIC,MAAJ,CAAW,MAAMC,MAAN,CAAaf,mBAAb,EAAkC,GAAlC,CAAX,EAAmD,GAAnD,CAAtB,EAA+E,EAA/E,CAAhB;AACD;;AAED,MAAIiB,MAAM,GAAGC,UAAU,CAACT,aAAD,EAAgB,EAAhB,CAAvB;;AAEA,MAAIQ,MAAM,GAAGf,GAAb,EAAkB;AAChBe,IAAAA,MAAM,GAAGf,GAAT;AACD;;AAED,MAAIe,MAAM,GAAGX,GAAb,EAAkB;AAChBW,IAAAA,MAAM,GAAGX,GAAT;AACD;;AAED,SAAOW,MAAP;AACD","sourcesContent":["/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = convertStringToNumber;\n\nfunction convertStringToNumber(stringToConvert) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _props$decimalDelimit = props.decimalDelimiter,\n      decimalDelimiter = _props$decimalDelimit === void 0 ? '.' : _props$decimalDelimit,\n      _props$digitGroupDeli = props.digitGroupDelimiter,\n      digitGroupDelimiter = _props$digitGroupDeli === void 0 ? ',' : _props$digitGroupDeli,\n      _props$min = props.min,\n      min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min,\n      _props$max = props.max,\n      max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max;\n\n  if (digitGroupDelimiter == '') {\n    return ',';\n  }\n\n  if (!stringToConvert) {\n    return NaN;\n  }\n\n  var cleanedString = stringToConvert;\n  var decmialPosition = cleanedString.lastIndexOf(decimalDelimiter);\n\n  if (decmialPosition !== -1 && decimalDelimiter !== '.') {\n    cleanedString = [cleanedString.substring(0, decmialPosition).replace(new RegExp(\"[\\\\\".concat(digitGroupDelimiter, \"]\"), 'g'), ''), cleanedString.substring(decmialPosition).replace(new RegExp(\"[\\\\\".concat(decimalDelimiter, \"]\"), 'g'), '.')].join('');\n  } else {\n    cleanedString = cleanedString.replace(new RegExp(\"[\\\\\".concat(digitGroupDelimiter, \"]\"), 'g'), '');\n  }\n\n  var result = parseFloat(cleanedString, 10);\n\n  if (result < min) {\n    result = min;\n  }\n\n  if (result > max) {\n    result = max;\n  }\n\n  return result;\n}"]},"metadata":{},"sourceType":"script"}