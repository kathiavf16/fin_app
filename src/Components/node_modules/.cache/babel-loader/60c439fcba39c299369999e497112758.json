{"ast":null,"code":"/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _useProperty5 = _interopRequireDefault(require(\"../useProperty\"));\n\nvar _isSelectionEnabled = _interopRequireDefault(require(\"./isSelectionEnabled\"));\n\nvar _isMultiSelect = _interopRequireDefault(require(\"./isMultiSelect\"));\n\nvar _isSelectionControlled = _interopRequireDefault(require(\"./isSelectionControlled\"));\n\nvar _handleSelection = require(\"../useRow/handleSelection\");\n\nvar _batchUpdate = _interopRequireDefault(require(\"../../utils/batchUpdate\"));\n\nvar EMPTY_OBJECT = {};\n\nvar getUnselectedFromProps = function getUnselectedFromProps(computedProps) {\n  if (!computedProps) {\n    return null;\n  }\n\n  if (computedProps.computedUnselected === undefined) {\n    return null;\n  }\n\n  return computedProps.computedUnselected;\n};\n\nvar getUnselectedCountFromProps = function getUnselectedCountFromProps(computedProps, unselected) {\n  if (!computedProps) {\n    return 0;\n  }\n\n  if (!computedProps.computedRowSelectionEnabled) {\n    return 0;\n  }\n\n  if (!computedProps.computedRowMultiSelectionEnabled) {\n    return 0;\n  }\n\n  unselected = unselected === undefined ? getUnselectedFromProps(computedProps) : unselected;\n  return unselected ? Object.keys(unselected).length : 0;\n};\n\nvar getSelectedCountFromProps = function getSelectedCountFromProps(computedProps, selected, unselected) {\n  if (!computedProps) {\n    return 0;\n  }\n\n  if (!computedProps.computedRowSelectionEnabled) {\n    return 0;\n  }\n\n  var multiSelect = computedProps.computedRowMultiSelectionEnabled;\n  selected = selected === undefined ? computedProps.computedSelected : selected;\n\n  if (multiSelect && selected === true) {\n    var unselectedCount = getUnselectedCountFromProps(computedProps, unselected);\n    return computedProps.paginationCount - unselectedCount;\n  }\n\n  return multiSelect ? selected ? Object.keys(selected).length : 0 : !selected || Object.keys(selected).length === 0 ? 0 : 1;\n};\n\nvar useUnselected = function useUnselected(props, _ref, computedPropsRef) {\n  var rowSelectionEnabled = _ref.rowSelectionEnabled,\n      rowMultiSelectionEnabled = _ref.rowMultiSelectionEnabled;\n\n  var _useProperty = (0, _useProperty5.default)(props, 'unselected'),\n      _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n      unselected = _useProperty2[0],\n      setUnselected = _useProperty2[1];\n\n  var _useState = (0, _react.useState)(unselected ? Object.keys(unselected).length : 0),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      unselectedCount = _useState2[0],\n      setUnselectedCount = _useState2[1];\n\n  if (!rowSelectionEnabled) {\n    return {\n      unselected: null,\n      setUnselected: setUnselected\n    };\n  }\n\n  if (!rowMultiSelectionEnabled) {\n    return {\n      unselected: null,\n      setUnselected: setUnselected\n    };\n  }\n\n  return {\n    unselected: unselected,\n    setUnselected: setUnselected\n  };\n};\n\nvar useSelected = function useSelected(props, computedProps, computedPropsRef) {\n  var _useProperty3 = (0, _useProperty5.default)(props, 'selected', undefined, {\n    onChange: function onChange(selected) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          silent = _ref2.silent,\n          unselected = _ref2.unselected,\n          data = _ref2.data;\n\n      var computedProps = computedPropsRef.current;\n\n      if (props.onSelectionChange && !silent) {\n        props.onSelectionChange({\n          selected: selected,\n          data: data,\n          unselected: unselected !== undefined ? unselected : computedProps != null ? computedProps.computedUnselected : null\n        });\n      }\n    }\n  }),\n      _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),\n      selected = _useProperty4[0],\n      setSelected = _useProperty4[1];\n\n  var rowSelectionEnabled = (0, _isSelectionEnabled.default)(props);\n  var rowMultiSelectionEnabled = (0, _isMultiSelect.default)(props);\n\n  if (!rowSelectionEnabled) {\n    return {\n      selected: null,\n      setSelected: setSelected,\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    };\n  }\n\n  if ((0, _isSelectionControlled.default)(props)) {\n    return {\n      selected: selected,\n      setSelected: setSelected,\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    };\n  }\n\n  if (rowMultiSelectionEnabled && ((0, _typeof2.default)(selected) != 'object' || !selected) && selected !== true) {\n    selected = EMPTY_OBJECT;\n  }\n\n  return {\n    selected: selected,\n    setSelected: setSelected,\n    rowSelectionEnabled: rowSelectionEnabled,\n    rowMultiSelectionEnabled: rowMultiSelectionEnabled\n  };\n};\n\nvar _default = function _default(props, computedProps, computedPropsRef) {\n  var _useSelected = useSelected(props, computedProps, computedPropsRef),\n      computedSelected = _useSelected.selected,\n      setSelected = _useSelected.setSelected,\n      rowMultiSelectionEnabled = _useSelected.rowMultiSelectionEnabled,\n      rowSelectionEnabled = _useSelected.rowSelectionEnabled;\n\n  var computedRowSelectionEnabled = rowSelectionEnabled;\n  var computedRowMultiSelectionEnabled = rowMultiSelectionEnabled;\n\n  var _useUnselected = useUnselected(props, {\n    rowSelectionEnabled: rowSelectionEnabled,\n    rowMultiSelectionEnabled: rowMultiSelectionEnabled\n  }, computedPropsRef),\n      computedUnselected = _useUnselected.unselected,\n      setUnselected = _useUnselected.setUnselected;\n\n  var computedSelectedCount = getSelectedCountFromProps({\n    computedPagination: computedProps.computedPagination,\n    computedRemoteData: computedProps.computedRemoteData,\n    paginationCount: computedProps.paginationCount,\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedRowSelectionEnabled: computedRowSelectionEnabled\n  }, computedSelected, computedUnselected);\n  var computedUnselectedCount = getUnselectedCountFromProps({\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedRowSelectionEnabled: computedRowSelectionEnabled\n  }, computedUnselected);\n  var isSelectionEmpty = (0, _react.useCallback)(function () {\n    var selected = computedSelected;\n    var selectionEmpty = false;\n\n    if (selected == null) {\n      selectionEmpty = true;\n    }\n\n    if ((0, _typeof2.default)(selected) === 'object' && selected !== null) {\n      selectionEmpty = Object.keys(selected).length === 0;\n    }\n\n    return selectionEmpty;\n  }, [computedSelected]);\n  var getSelectedMap = (0, _react.useCallback)(function () {\n    if (computedRowMultiSelectionEnabled) {\n      return computedSelected;\n    }\n\n    return (0, _defineProperty2.default)({}, computedSelected, true);\n  }, [computedRowMultiSelectionEnabled, computedSelected]);\n  var getUnselected = (0, _react.useCallback)(function () {\n    return getUnselectedFromProps(computedPropsRef.current);\n  }, []);\n  var getUnselectedMap = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return {};\n    }\n\n    var unselected = getUnselected();\n\n    if (computedProps.computedRowMultiSelectionEnabled) {\n      return unselected || {};\n    }\n\n    return {};\n  }, [getUnselected]);\n\n  var getUnselectedCount = function getUnselectedCount(unselected) {\n    return getUnselectedCountFromProps(computedPropsRef.current, unselected);\n  };\n\n  var getSelectedCount = function getSelectedCount(selected, unselected) {\n    return getSelectedCountFromProps(computedPropsRef.current, selected, unselected);\n  };\n\n  var isRowSelected = (0, _react.useCallback)(function (data) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return false;\n    }\n\n    if (typeof data == 'number') {\n      data = computedProps.getItemAt(data);\n    }\n\n    var selectedMap = getSelectedMap();\n    var id = computedProps.getItemId(data);\n\n    if (selectedMap === true) {\n      var unselectedMap = getUnselectedMap();\n      return !unselectedMap[id];\n    }\n\n    return !!selectedMap[id];\n  }, [getSelectedMap, getUnselectedMap]);\n  var cellSelectionTmp = props.cellSelection || props.defaultCellSelection;\n  var activeCellDefined = props.activeCell !== undefined || props.defaultActiveCell !== undefined;\n  var computedHasRowNavigation = (computedRowSelectionEnabled || !cellSelectionTmp) && computedProps.computedActiveIndex > -1 ? true : props.enableKeyboardNavigation !== false && !cellSelectionTmp && !activeCellDefined;\n\n  if (props.enableKeyboardNavigation === false) {\n    computedHasRowNavigation = false;\n  }\n\n  var _computedProps$useCel = computedProps.useCellSelection(props, {\n    rowSelectionEnabled: rowSelectionEnabled,\n    listenOnCellEnter: computedProps.listenOnCellEnter,\n    hasRowNavigation: computedHasRowNavigation\n  }, computedPropsRef),\n      computedCellSelection = _computedProps$useCel.computedCellSelection,\n      setCellSelection = _computedProps$useCel.setCellSelection,\n      computedCellSelectionEnabled = _computedProps$useCel.cellSelectionEnabled,\n      computedCellMultiSelectionEnabled = _computedProps$useCel.cellMultiSelectionEnabled,\n      computedCellNavigationEnabled = _computedProps$useCel.cellNavigationEnabled,\n      computedActiveCell = _computedProps$useCel.computedActiveCell,\n      incrementActiveCell = _computedProps$useCel.incrementActiveCell,\n      getCellSelectionIdKey = _computedProps$useCel.getCellSelectionIdKey,\n      getCellSelectionBetween = _computedProps$useCel.getCellSelectionBetween,\n      toggleActiveCellSelection = _computedProps$useCel.toggleActiveCellSelection,\n      onCellEnter = _computedProps$useCel.onCellEnter,\n      setActiveCell = _computedProps$useCel.setActiveCell,\n      getCellSelectionKey = _computedProps$useCel.getCellSelectionKey,\n      cellDragStartRowIndex = _computedProps$useCel.cellDragStartRowIndex,\n      setCellDragStartRowIndex = _computedProps$useCel.setCellDragStartRowIndex,\n      onCellSelectionDraggerMouseDown = _computedProps$useCel.onCellSelectionDraggerMouseDown;\n\n  var selectAll = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    if (!computedProps.computedRowSelectionEnabled) {\n      return;\n    }\n\n    var data = computedProps.data;\n    var dataMap = computedProps.dataMap;\n\n    if (computedProps.computedGroupBy) {\n      dataMap = {};\n      data = data.filter(function (d) {\n        var id = computedProps.getItemId(d);\n\n        if (!d.__group) {\n          dataMap[id] = id;\n          return true;\n        }\n      });\n    }\n\n    (0, _handleSelection.notifySelection)(computedProps, computedProps.computedRemoteData || computedProps.computedPagination ? true : dataMap, data, null);\n  }, []);\n  var deselectAll = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    (0, _handleSelection.notifySelection)(computedProps, {}, [], null);\n  }, []);\n  var setRowSelected = (0, _react.useCallback)(function (index, selected, event) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var queue = (0, _batchUpdate.default)();\n\n    if (computedProps.checkboxSelectEnableShiftKey && computedProps.computedRowMultiSelectionEnabled) {\n      if (event && event.target) {\n        var shiftKey = event.shiftKey,\n            metaKey = event.metaKey,\n            ctrlKey = event.ctrlKey;\n\n        if (shiftKey) {\n          var rowProps = {\n            data: computedProps.getItemAt(index),\n            rowIndex: index\n          };\n          (0, _handleSelection.handleSelection)(rowProps, computedProps, {\n            shiftKey: shiftKey,\n            metaKey: metaKey,\n            ctrlKey: ctrlKey\n          }, queue);\n          return;\n        }\n\n        computedProps.shiftKeyIndexRef.current = index;\n        computedProps.selectionIndexRef.current = index;\n      }\n    }\n\n    computedProps.setSelectedAt(index, selected, queue);\n    queue.commit();\n  }, [computedProps.initialProps.checkboxSelectEnableShiftKey]);\n  var setSelectedAt = (0, _react.useCallback)(function (index, selected, queue) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var data = computedProps.data[index];\n\n    if (!data) {\n      return;\n    }\n\n    var id = computedProps.getItemId(data);\n    computedProps.setSelectedById(id, selected, queue);\n  }, []);\n  var setSelectedById = (0, _react.useCallback)(function (id, selected, queue) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var data = computedProps.dataMap ? computedProps.dataMap[id] : null;\n\n    if (!data) {\n      return;\n    }\n\n    var isSelected = computedProps.isRowSelected(data);\n    var multiSelect = computedProps.computedRowMultiSelectionEnabled;\n\n    if (isSelected === selected) {\n      return;\n    }\n\n    if (multiSelect) {\n      var selectedMap = computedProps.computedSelected;\n      var unselectedMap = selectedMap === true ? computedProps.computedUnselected || {} : null;\n      var clone = selectedMap;\n\n      if (selectedMap === true) {\n        if (unselectedMap) {\n          unselectedMap = Object.assign({}, unselectedMap);\n        }\n\n        if (!selected && unselectedMap) {\n          unselectedMap[id] = true;\n          var totalCount = computedProps.paginationCount;\n\n          if (Object.keys(unselectedMap).length === totalCount) {\n            computedProps.deselectAll();\n            return;\n          }\n        } else {\n          if (unselectedMap) {\n            delete unselectedMap[id];\n          }\n\n          if (getUnselectedCountFromProps(computedProps, unselectedMap) === 0) {\n            unselectedMap = null;\n          }\n        }\n      } else {\n        clone = Object.assign({}, selectedMap);\n\n        if (selected) {\n          clone[id] = data;\n        } else {\n          delete clone[id];\n        }\n      }\n\n      (0, _handleSelection.notifySelection)(computedProps, clone, data, unselectedMap, queue);\n    } else {\n      (0, _handleSelection.notifySelection)(computedProps, selected ? id : null, data, null, queue);\n    }\n  }, []);\n  return {\n    selectAll: selectAll,\n    deselectAll: deselectAll,\n    setRowSelected: setRowSelected,\n    setSelectedAt: setSelectedAt,\n    setSelectedById: setSelectedById,\n    setCellSelection: setCellSelection,\n    computedCellSelection: computedCellSelection,\n    computedCellSelectionEnabled: computedCellSelectionEnabled,\n    computedCellMultiSelectionEnabled: computedCellMultiSelectionEnabled,\n    computedCellNavigationEnabled: computedCellNavigationEnabled,\n    computedActiveCell: computedActiveCell,\n    getCellSelectionBetween: getCellSelectionBetween,\n    incrementActiveCell: incrementActiveCell,\n    cellDragStartRowIndex: cellDragStartRowIndex,\n    setCellDragStartRowIndex: setCellDragStartRowIndex,\n    onCellEnter: onCellEnter,\n    onCellSelectionDraggerMouseDown: onCellSelectionDraggerMouseDown,\n    toggleActiveCellSelection: toggleActiveCellSelection,\n    computedHasRowNavigation: computedHasRowNavigation,\n    computedRowSelectionEnabled: computedRowSelectionEnabled,\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedSelected: computedSelected,\n    setSelected: setSelected,\n    computedUnselected: computedUnselected,\n    setUnselected: setUnselected,\n    isSelectionEmpty: isSelectionEmpty,\n    getSelectedMap: getSelectedMap,\n    getUnselectedMap: getUnselectedMap,\n    isRowSelected: isRowSelected,\n    getUnselectedCount: getUnselectedCount,\n    getSelectedCount: getSelectedCount,\n    computedUnselectedCount: computedUnselectedCount,\n    computedSelectedCount: computedSelectedCount,\n    getCellSelectionIdKey: getCellSelectionIdKey,\n    setActiveCell: setActiveCell,\n    getCellSelectionKey: getCellSelectionKey\n  };\n};\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/kathiavargas/node_modules/@inovua/reactdatagrid-community/hooks/useSelection/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_defineProperty2","_typeof2","_slicedToArray2","_react","_useProperty5","_isSelectionEnabled","_isMultiSelect","_isSelectionControlled","_handleSelection","_batchUpdate","EMPTY_OBJECT","getUnselectedFromProps","computedProps","computedUnselected","undefined","getUnselectedCountFromProps","unselected","computedRowSelectionEnabled","computedRowMultiSelectionEnabled","keys","length","getSelectedCountFromProps","selected","multiSelect","computedSelected","unselectedCount","paginationCount","useUnselected","props","_ref","computedPropsRef","rowSelectionEnabled","rowMultiSelectionEnabled","_useProperty","_useProperty2","setUnselected","_useState","useState","_useState2","setUnselectedCount","useSelected","_useProperty3","onChange","_ref2","arguments","silent","data","current","onSelectionChange","_useProperty4","setSelected","_default","_useSelected","_useUnselected","computedSelectedCount","computedPagination","computedRemoteData","computedUnselectedCount","isSelectionEmpty","useCallback","selectionEmpty","getSelectedMap","getUnselected","getUnselectedMap","getUnselectedCount","getSelectedCount","isRowSelected","getItemAt","selectedMap","id","getItemId","unselectedMap","cellSelectionTmp","cellSelection","defaultCellSelection","activeCellDefined","activeCell","defaultActiveCell","computedHasRowNavigation","computedActiveIndex","enableKeyboardNavigation","_computedProps$useCel","useCellSelection","listenOnCellEnter","hasRowNavigation","computedCellSelection","setCellSelection","computedCellSelectionEnabled","cellSelectionEnabled","computedCellMultiSelectionEnabled","cellMultiSelectionEnabled","computedCellNavigationEnabled","cellNavigationEnabled","computedActiveCell","incrementActiveCell","getCellSelectionIdKey","getCellSelectionBetween","toggleActiveCellSelection","onCellEnter","setActiveCell","getCellSelectionKey","cellDragStartRowIndex","setCellDragStartRowIndex","onCellSelectionDraggerMouseDown","selectAll","dataMap","computedGroupBy","filter","d","__group","notifySelection","deselectAll","setRowSelected","index","event","queue","checkboxSelectEnableShiftKey","target","shiftKey","metaKey","ctrlKey","rowProps","rowIndex","handleSelection","shiftKeyIndexRef","selectionIndexRef","setSelectedAt","commit","initialProps","setSelectedById","isSelected","clone","assign","totalCount"],"mappings":"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","sourcesContent":["/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _useProperty5 = _interopRequireDefault(require(\"../useProperty\"));\n\nvar _isSelectionEnabled = _interopRequireDefault(require(\"./isSelectionEnabled\"));\n\nvar _isMultiSelect = _interopRequireDefault(require(\"./isMultiSelect\"));\n\nvar _isSelectionControlled = _interopRequireDefault(require(\"./isSelectionControlled\"));\n\nvar _handleSelection = require(\"../useRow/handleSelection\");\n\nvar _batchUpdate = _interopRequireDefault(require(\"../../utils/batchUpdate\"));\n\nvar EMPTY_OBJECT = {};\n\nvar getUnselectedFromProps = function getUnselectedFromProps(computedProps) {\n  if (!computedProps) {\n    return null;\n  }\n\n  if (computedProps.computedUnselected === undefined) {\n    return null;\n  }\n\n  return computedProps.computedUnselected;\n};\n\nvar getUnselectedCountFromProps = function getUnselectedCountFromProps(computedProps, unselected) {\n  if (!computedProps) {\n    return 0;\n  }\n\n  if (!computedProps.computedRowSelectionEnabled) {\n    return 0;\n  }\n\n  if (!computedProps.computedRowMultiSelectionEnabled) {\n    return 0;\n  }\n\n  unselected = unselected === undefined ? getUnselectedFromProps(computedProps) : unselected;\n  return unselected ? Object.keys(unselected).length : 0;\n};\n\nvar getSelectedCountFromProps = function getSelectedCountFromProps(computedProps, selected, unselected) {\n  if (!computedProps) {\n    return 0;\n  }\n\n  if (!computedProps.computedRowSelectionEnabled) {\n    return 0;\n  }\n\n  var multiSelect = computedProps.computedRowMultiSelectionEnabled;\n  selected = selected === undefined ? computedProps.computedSelected : selected;\n\n  if (multiSelect && selected === true) {\n    var unselectedCount = getUnselectedCountFromProps(computedProps, unselected);\n    return computedProps.paginationCount - unselectedCount;\n  }\n\n  return multiSelect ? selected ? Object.keys(selected).length : 0 : !selected || Object.keys(selected).length === 0 ? 0 : 1;\n};\n\nvar useUnselected = function useUnselected(props, _ref, computedPropsRef) {\n  var rowSelectionEnabled = _ref.rowSelectionEnabled,\n      rowMultiSelectionEnabled = _ref.rowMultiSelectionEnabled;\n\n  var _useProperty = (0, _useProperty5.default)(props, 'unselected'),\n      _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n      unselected = _useProperty2[0],\n      setUnselected = _useProperty2[1];\n\n  var _useState = (0, _react.useState)(unselected ? Object.keys(unselected).length : 0),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      unselectedCount = _useState2[0],\n      setUnselectedCount = _useState2[1];\n\n  if (!rowSelectionEnabled) {\n    return {\n      unselected: null,\n      setUnselected: setUnselected\n    };\n  }\n\n  if (!rowMultiSelectionEnabled) {\n    return {\n      unselected: null,\n      setUnselected: setUnselected\n    };\n  }\n\n  return {\n    unselected: unselected,\n    setUnselected: setUnselected\n  };\n};\n\nvar useSelected = function useSelected(props, computedProps, computedPropsRef) {\n  var _useProperty3 = (0, _useProperty5.default)(props, 'selected', undefined, {\n    onChange: function onChange(selected) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          silent = _ref2.silent,\n          unselected = _ref2.unselected,\n          data = _ref2.data;\n\n      var computedProps = computedPropsRef.current;\n\n      if (props.onSelectionChange && !silent) {\n        props.onSelectionChange({\n          selected: selected,\n          data: data,\n          unselected: unselected !== undefined ? unselected : computedProps != null ? computedProps.computedUnselected : null\n        });\n      }\n    }\n  }),\n      _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),\n      selected = _useProperty4[0],\n      setSelected = _useProperty4[1];\n\n  var rowSelectionEnabled = (0, _isSelectionEnabled.default)(props);\n  var rowMultiSelectionEnabled = (0, _isMultiSelect.default)(props);\n\n  if (!rowSelectionEnabled) {\n    return {\n      selected: null,\n      setSelected: setSelected,\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    };\n  }\n\n  if ((0, _isSelectionControlled.default)(props)) {\n    return {\n      selected: selected,\n      setSelected: setSelected,\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    };\n  }\n\n  if (rowMultiSelectionEnabled && ((0, _typeof2.default)(selected) != 'object' || !selected) && selected !== true) {\n    selected = EMPTY_OBJECT;\n  }\n\n  return {\n    selected: selected,\n    setSelected: setSelected,\n    rowSelectionEnabled: rowSelectionEnabled,\n    rowMultiSelectionEnabled: rowMultiSelectionEnabled\n  };\n};\n\nvar _default = function _default(props, computedProps, computedPropsRef) {\n  var _useSelected = useSelected(props, computedProps, computedPropsRef),\n      computedSelected = _useSelected.selected,\n      setSelected = _useSelected.setSelected,\n      rowMultiSelectionEnabled = _useSelected.rowMultiSelectionEnabled,\n      rowSelectionEnabled = _useSelected.rowSelectionEnabled;\n\n  var computedRowSelectionEnabled = rowSelectionEnabled;\n  var computedRowMultiSelectionEnabled = rowMultiSelectionEnabled;\n\n  var _useUnselected = useUnselected(props, {\n    rowSelectionEnabled: rowSelectionEnabled,\n    rowMultiSelectionEnabled: rowMultiSelectionEnabled\n  }, computedPropsRef),\n      computedUnselected = _useUnselected.unselected,\n      setUnselected = _useUnselected.setUnselected;\n\n  var computedSelectedCount = getSelectedCountFromProps({\n    computedPagination: computedProps.computedPagination,\n    computedRemoteData: computedProps.computedRemoteData,\n    paginationCount: computedProps.paginationCount,\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedRowSelectionEnabled: computedRowSelectionEnabled\n  }, computedSelected, computedUnselected);\n  var computedUnselectedCount = getUnselectedCountFromProps({\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedRowSelectionEnabled: computedRowSelectionEnabled\n  }, computedUnselected);\n  var isSelectionEmpty = (0, _react.useCallback)(function () {\n    var selected = computedSelected;\n    var selectionEmpty = false;\n\n    if (selected == null) {\n      selectionEmpty = true;\n    }\n\n    if ((0, _typeof2.default)(selected) === 'object' && selected !== null) {\n      selectionEmpty = Object.keys(selected).length === 0;\n    }\n\n    return selectionEmpty;\n  }, [computedSelected]);\n  var getSelectedMap = (0, _react.useCallback)(function () {\n    if (computedRowMultiSelectionEnabled) {\n      return computedSelected;\n    }\n\n    return (0, _defineProperty2.default)({}, computedSelected, true);\n  }, [computedRowMultiSelectionEnabled, computedSelected]);\n  var getUnselected = (0, _react.useCallback)(function () {\n    return getUnselectedFromProps(computedPropsRef.current);\n  }, []);\n  var getUnselectedMap = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return {};\n    }\n\n    var unselected = getUnselected();\n\n    if (computedProps.computedRowMultiSelectionEnabled) {\n      return unselected || {};\n    }\n\n    return {};\n  }, [getUnselected]);\n\n  var getUnselectedCount = function getUnselectedCount(unselected) {\n    return getUnselectedCountFromProps(computedPropsRef.current, unselected);\n  };\n\n  var getSelectedCount = function getSelectedCount(selected, unselected) {\n    return getSelectedCountFromProps(computedPropsRef.current, selected, unselected);\n  };\n\n  var isRowSelected = (0, _react.useCallback)(function (data) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return false;\n    }\n\n    if (typeof data == 'number') {\n      data = computedProps.getItemAt(data);\n    }\n\n    var selectedMap = getSelectedMap();\n    var id = computedProps.getItemId(data);\n\n    if (selectedMap === true) {\n      var unselectedMap = getUnselectedMap();\n      return !unselectedMap[id];\n    }\n\n    return !!selectedMap[id];\n  }, [getSelectedMap, getUnselectedMap]);\n  var cellSelectionTmp = props.cellSelection || props.defaultCellSelection;\n  var activeCellDefined = props.activeCell !== undefined || props.defaultActiveCell !== undefined;\n  var computedHasRowNavigation = (computedRowSelectionEnabled || !cellSelectionTmp) && computedProps.computedActiveIndex > -1 ? true : props.enableKeyboardNavigation !== false && !cellSelectionTmp && !activeCellDefined;\n\n  if (props.enableKeyboardNavigation === false) {\n    computedHasRowNavigation = false;\n  }\n\n  var _computedProps$useCel = computedProps.useCellSelection(props, {\n    rowSelectionEnabled: rowSelectionEnabled,\n    listenOnCellEnter: computedProps.listenOnCellEnter,\n    hasRowNavigation: computedHasRowNavigation\n  }, computedPropsRef),\n      computedCellSelection = _computedProps$useCel.computedCellSelection,\n      setCellSelection = _computedProps$useCel.setCellSelection,\n      computedCellSelectionEnabled = _computedProps$useCel.cellSelectionEnabled,\n      computedCellMultiSelectionEnabled = _computedProps$useCel.cellMultiSelectionEnabled,\n      computedCellNavigationEnabled = _computedProps$useCel.cellNavigationEnabled,\n      computedActiveCell = _computedProps$useCel.computedActiveCell,\n      incrementActiveCell = _computedProps$useCel.incrementActiveCell,\n      getCellSelectionIdKey = _computedProps$useCel.getCellSelectionIdKey,\n      getCellSelectionBetween = _computedProps$useCel.getCellSelectionBetween,\n      toggleActiveCellSelection = _computedProps$useCel.toggleActiveCellSelection,\n      onCellEnter = _computedProps$useCel.onCellEnter,\n      setActiveCell = _computedProps$useCel.setActiveCell,\n      getCellSelectionKey = _computedProps$useCel.getCellSelectionKey,\n      cellDragStartRowIndex = _computedProps$useCel.cellDragStartRowIndex,\n      setCellDragStartRowIndex = _computedProps$useCel.setCellDragStartRowIndex,\n      onCellSelectionDraggerMouseDown = _computedProps$useCel.onCellSelectionDraggerMouseDown;\n\n  var selectAll = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    if (!computedProps.computedRowSelectionEnabled) {\n      return;\n    }\n\n    var data = computedProps.data;\n    var dataMap = computedProps.dataMap;\n\n    if (computedProps.computedGroupBy) {\n      dataMap = {};\n      data = data.filter(function (d) {\n        var id = computedProps.getItemId(d);\n\n        if (!d.__group) {\n          dataMap[id] = id;\n          return true;\n        }\n      });\n    }\n\n    (0, _handleSelection.notifySelection)(computedProps, computedProps.computedRemoteData || computedProps.computedPagination ? true : dataMap, data, null);\n  }, []);\n  var deselectAll = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    (0, _handleSelection.notifySelection)(computedProps, {}, [], null);\n  }, []);\n  var setRowSelected = (0, _react.useCallback)(function (index, selected, event) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var queue = (0, _batchUpdate.default)();\n\n    if (computedProps.checkboxSelectEnableShiftKey && computedProps.computedRowMultiSelectionEnabled) {\n      if (event && event.target) {\n        var shiftKey = event.shiftKey,\n            metaKey = event.metaKey,\n            ctrlKey = event.ctrlKey;\n\n        if (shiftKey) {\n          var rowProps = {\n            data: computedProps.getItemAt(index),\n            rowIndex: index\n          };\n          (0, _handleSelection.handleSelection)(rowProps, computedProps, {\n            shiftKey: shiftKey,\n            metaKey: metaKey,\n            ctrlKey: ctrlKey\n          }, queue);\n          return;\n        }\n\n        computedProps.shiftKeyIndexRef.current = index;\n        computedProps.selectionIndexRef.current = index;\n      }\n    }\n\n    computedProps.setSelectedAt(index, selected, queue);\n    queue.commit();\n  }, [computedProps.initialProps.checkboxSelectEnableShiftKey]);\n  var setSelectedAt = (0, _react.useCallback)(function (index, selected, queue) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var data = computedProps.data[index];\n\n    if (!data) {\n      return;\n    }\n\n    var id = computedProps.getItemId(data);\n    computedProps.setSelectedById(id, selected, queue);\n  }, []);\n  var setSelectedById = (0, _react.useCallback)(function (id, selected, queue) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var data = computedProps.dataMap ? computedProps.dataMap[id] : null;\n\n    if (!data) {\n      return;\n    }\n\n    var isSelected = computedProps.isRowSelected(data);\n    var multiSelect = computedProps.computedRowMultiSelectionEnabled;\n\n    if (isSelected === selected) {\n      return;\n    }\n\n    if (multiSelect) {\n      var selectedMap = computedProps.computedSelected;\n      var unselectedMap = selectedMap === true ? computedProps.computedUnselected || {} : null;\n      var clone = selectedMap;\n\n      if (selectedMap === true) {\n        if (unselectedMap) {\n          unselectedMap = Object.assign({}, unselectedMap);\n        }\n\n        if (!selected && unselectedMap) {\n          unselectedMap[id] = true;\n          var totalCount = computedProps.paginationCount;\n\n          if (Object.keys(unselectedMap).length === totalCount) {\n            computedProps.deselectAll();\n            return;\n          }\n        } else {\n          if (unselectedMap) {\n            delete unselectedMap[id];\n          }\n\n          if (getUnselectedCountFromProps(computedProps, unselectedMap) === 0) {\n            unselectedMap = null;\n          }\n        }\n      } else {\n        clone = Object.assign({}, selectedMap);\n\n        if (selected) {\n          clone[id] = data;\n        } else {\n          delete clone[id];\n        }\n      }\n\n      (0, _handleSelection.notifySelection)(computedProps, clone, data, unselectedMap, queue);\n    } else {\n      (0, _handleSelection.notifySelection)(computedProps, selected ? id : null, data, null, queue);\n    }\n  }, []);\n  return {\n    selectAll: selectAll,\n    deselectAll: deselectAll,\n    setRowSelected: setRowSelected,\n    setSelectedAt: setSelectedAt,\n    setSelectedById: setSelectedById,\n    setCellSelection: setCellSelection,\n    computedCellSelection: computedCellSelection,\n    computedCellSelectionEnabled: computedCellSelectionEnabled,\n    computedCellMultiSelectionEnabled: computedCellMultiSelectionEnabled,\n    computedCellNavigationEnabled: computedCellNavigationEnabled,\n    computedActiveCell: computedActiveCell,\n    getCellSelectionBetween: getCellSelectionBetween,\n    incrementActiveCell: incrementActiveCell,\n    cellDragStartRowIndex: cellDragStartRowIndex,\n    setCellDragStartRowIndex: setCellDragStartRowIndex,\n    onCellEnter: onCellEnter,\n    onCellSelectionDraggerMouseDown: onCellSelectionDraggerMouseDown,\n    toggleActiveCellSelection: toggleActiveCellSelection,\n    computedHasRowNavigation: computedHasRowNavigation,\n    computedRowSelectionEnabled: computedRowSelectionEnabled,\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedSelected: computedSelected,\n    setSelected: setSelected,\n    computedUnselected: computedUnselected,\n    setUnselected: setUnselected,\n    isSelectionEmpty: isSelectionEmpty,\n    getSelectedMap: getSelectedMap,\n    getUnselectedMap: getUnselectedMap,\n    isRowSelected: isRowSelected,\n    getUnselectedCount: getUnselectedCount,\n    getSelectedCount: getSelectedCount,\n    computedUnselectedCount: computedUnselectedCount,\n    computedSelectedCount: computedSelectedCount,\n    getCellSelectionIdKey: getCellSelectionIdKey,\n    setActiveCell: setActiveCell,\n    getCellSelectionKey: getCellSelectionKey\n  };\n};\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}