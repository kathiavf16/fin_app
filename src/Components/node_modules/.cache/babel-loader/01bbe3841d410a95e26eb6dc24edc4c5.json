{"ast":null,"code":"/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _useProperty3 = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/useProperty\"));\n\nvar _react = require(\"react\");\n\nvar _clamp = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/clamp\"));\n\nvar _usePrevious = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/usePrevious\"));\n\nvar _batchUpdate = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/batchUpdate\"));\n\nvar useActiveCell = function useActiveCell(props, computedPropsRef) {\n  var _useProperty = (0, _useProperty3.default)(props, 'activeCell'),\n      _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n      computedActiveCell = _useProperty2[0],\n      doSetActiveCell = _useProperty2[1];\n\n  if (!props.enableKeyboardNavigation) {\n    computedActiveCell = undefined;\n  }\n\n  var setActiveCell = (0, _react.useCallback)(function (activeCell, queue) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps || !computedProps.computedCellNavigationEnabled) {\n      return;\n    }\n\n    var computedActiveCell = computedProps.computedActiveCell,\n        data = computedProps.data,\n        visibleColumns = computedProps.visibleColumns;\n    var shouldCommit = !queue;\n    queue = queue || (0, _batchUpdate.default)();\n\n    if (activeCell) {\n      var _activeCell = activeCell,\n          _activeCell2 = (0, _slicedToArray2.default)(_activeCell, 2),\n          activeCellRowIndex = _activeCell2[0],\n          activeCellColumnIndex = _activeCell2[1];\n\n      activeCellRowIndex = (0, _clamp.default)(activeCellRowIndex, 0, data.length - 1);\n      activeCellColumnIndex = (0, _clamp.default)(activeCellColumnIndex, 0, visibleColumns.length - 1);\n      var col = computedProps.getColumnBy(activeCellColumnIndex);\n\n      if (col && col.cellSelectable === false) {\n        return;\n      }\n\n      if (!data || data.__group || activeCellRowIndex == null || activeCellColumnIndex == null) {\n        queue(function () {\n          doSetActiveCell(null);\n          computedProps.setLastCellInRange('');\n        });\n\n        if (shouldCommit) {\n          queue.commit();\n        }\n\n        return;\n      }\n\n      activeCell = [activeCellRowIndex, activeCellColumnIndex];\n\n      if (activeCell === computedActiveCell || computedActiveCell && activeCell && computedActiveCell[0] === activeCell[0] && computedActiveCell[1] === activeCell[1]) {\n        return;\n      }\n    }\n\n    queue(function () {\n      doSetActiveCell(activeCell);\n      computedProps.setLastCellInRange('');\n    });\n\n    if (shouldCommit) {\n      queue.commit();\n    }\n  }, []);\n  var oldActiveCell = (0, _usePrevious.default)(computedActiveCell, null);\n  (0, _react.useLayoutEffect)(function () {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    if (oldActiveCell !== computedActiveCell && computedActiveCell) {\n      var _computedActiveCell = computedActiveCell,\n          _computedActiveCell2 = (0, _slicedToArray2.default)(_computedActiveCell, 2),\n          rowIndex = _computedActiveCell2[0],\n          columnIndex = _computedActiveCell2[1];\n\n      if (rowIndex == null || columnIndex == null) {\n        return;\n      }\n\n      var top = !oldActiveCell || rowIndex < oldActiveCell[0];\n      var right = !oldActiveCell || columnIndex > oldActiveCell[1];\n      var scrollToColumnIndex = (0, _clamp.default)(columnIndex + (right ? 0 : -0), 0, computedProps.visibleColumns.length - 1);\n      computedProps.scrollToCell({\n        rowIndex: rowIndex,\n        columnIndex: scrollToColumnIndex\n      }, {\n        top: top,\n        right: right\n      });\n    }\n  }, [computedActiveCell, oldActiveCell]);\n  var getCellSelectionBetween = (0, _react.useCallback)(function (start, end) {\n    var computedProps = computedPropsRef.current;\n\n    if (!start || !end || !computedProps) {\n      return {};\n    }\n\n    var startRow = Math.min(start[0], end[0]);\n    var startCol = Math.min(start[1], end[1]);\n    var endRow = Math.max(start[0], end[0]);\n    var endCol = Math.max(start[1], end[1]);\n    var range = {};\n    var groupBy = computedProps.computedGroupBy;\n    var dataSource = groupBy ? computedProps.data : [];\n    var current;\n\n    for (var row = startRow; row <= endRow; row++) {\n      if (groupBy) {\n        current = dataSource[row];\n\n        if (!current) {\n          break;\n        }\n\n        if (current.__group) {\n          continue;\n        }\n      }\n\n      for (var col = startCol; col <= endCol; col++) {\n        range[getCellSelectionKey(row, col)] = true;\n      }\n    }\n\n    return range;\n  }, []);\n  var getCellSelectionKey = (0, _react.useCallback)(function (cellProps, col) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return -1;\n    }\n\n    var rowKey;\n    var colKey;\n\n    if (typeof cellProps === 'string') {\n      return cellProps;\n    }\n\n    if (typeof cellProps === 'number' && typeof col === 'number') {\n      rowKey = cellProps;\n      colKey = col;\n    } else {\n      if (cellProps) {\n        rowKey = cellProps.rowIndex;\n        colKey = cellProps.columnIndex;\n      }\n    }\n\n    if (!computedProps.cellSelectionByIndex) {\n      return computedProps.getCellSelectionIdKey(rowKey, colKey);\n    }\n\n    return \"\".concat([rowKey, colKey]);\n  }, [computedPropsRef, props.columns]);\n  var getCellSelectionIdKey = (0, _react.useCallback)(function (rowIndex, columnIndex) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return -1;\n    }\n\n    var col = computedProps.getColumnBy(columnIndex);\n\n    if (!col) {\n      return -1;\n    }\n\n    var colId = col.id || col.name;\n    var item = computedProps.getItemAt(rowIndex);\n\n    if (!item) {\n      return '';\n    }\n\n    var rowId = computedProps.getItemId(item);\n    return \"\".concat([rowId, colId]);\n  }, []);\n  var incrementActiveCell = (0, _react.useCallback)(function (direction) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var computedActiveCell = computedProps.computedActiveCell;\n\n    if (!computedActiveCell) {\n      computedActiveCell = [0, 0];\n    }\n\n    var _direction = (0, _slicedToArray2.default)(direction, 2),\n        row = _direction[0],\n        col = _direction[1];\n\n    var data = computedProps.data,\n        visibleColumns = computedProps.visibleColumns,\n        computedGroupBy = computedProps.computedGroupBy,\n        groupColumn = computedProps.groupColumn;\n    var maxRow = data.length - 1;\n    var columns = visibleColumns;\n    var maxCol = columns.length - 1;\n    var groupBy = computedGroupBy;\n    var minCol = groupBy && !groupColumn ? groupBy.length : 0;\n    var rowIndex = computedActiveCell[0];\n    var colIndex = computedActiveCell[1];\n\n    if (row) {\n      var rowSign = row < 0 ? -1 : 1;\n      var rowAdd = row;\n\n      while (data[rowIndex + rowAdd] && data[rowIndex + rowAdd].__group) {\n        rowIndex += rowAdd;\n        rowAdd = rowSign;\n      }\n\n      rowIndex += rowAdd;\n    }\n\n    if (col) {\n      var colSign = col < 0 ? -1 : 1;\n      var colAdd = col;\n\n      while (columns[colIndex + colAdd] && columns[colIndex + colAdd].cellSelectable === false) {\n        colIndex += colSign;\n        colAdd = colSign;\n      }\n\n      colIndex += colAdd;\n    }\n\n    rowIndex = (0, _clamp.default)(rowIndex, 0, maxRow);\n    colIndex = (0, _clamp.default)(colIndex, minCol, maxCol);\n    computedProps.setActiveCell([rowIndex, colIndex]);\n  }, []);\n  return {\n    getCellSelectionBetween: getCellSelectionBetween,\n    getCellSelectionIdKey: getCellSelectionIdKey,\n    computedActiveCell: computedActiveCell,\n    setActiveCell: setActiveCell,\n    getCellSelectionKey: getCellSelectionKey,\n    incrementActiveCell: incrementActiveCell\n  };\n};\n\nvar _default = useActiveCell;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kathiavargas/node_modules/@inovua/reactdatagrid-community/plugins/cell-selection/useActiveCell.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_slicedToArray2","_useProperty3","_react","_clamp","_usePrevious","_batchUpdate","useActiveCell","props","computedPropsRef","_useProperty","_useProperty2","computedActiveCell","doSetActiveCell","enableKeyboardNavigation","undefined","setActiveCell","useCallback","activeCell","queue","computedProps","current","computedCellNavigationEnabled","data","visibleColumns","shouldCommit","_activeCell","_activeCell2","activeCellRowIndex","activeCellColumnIndex","length","col","getColumnBy","cellSelectable","__group","setLastCellInRange","commit","oldActiveCell","useLayoutEffect","_computedActiveCell","_computedActiveCell2","rowIndex","columnIndex","top","right","scrollToColumnIndex","scrollToCell","getCellSelectionBetween","start","end","startRow","Math","min","startCol","endRow","max","endCol","range","groupBy","computedGroupBy","dataSource","row","getCellSelectionKey","cellProps","rowKey","colKey","cellSelectionByIndex","getCellSelectionIdKey","concat","columns","colId","id","name","item","getItemAt","rowId","getItemId","incrementActiveCell","direction","_direction","groupColumn","maxRow","maxCol","minCol","colIndex","rowSign","rowAdd","colSign","colAdd","_default"],"mappings":"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","sourcesContent":["/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _useProperty3 = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/useProperty\"));\n\nvar _react = require(\"react\");\n\nvar _clamp = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/clamp\"));\n\nvar _usePrevious = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/usePrevious\"));\n\nvar _batchUpdate = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/batchUpdate\"));\n\nvar useActiveCell = function useActiveCell(props, computedPropsRef) {\n  var _useProperty = (0, _useProperty3.default)(props, 'activeCell'),\n      _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n      computedActiveCell = _useProperty2[0],\n      doSetActiveCell = _useProperty2[1];\n\n  if (!props.enableKeyboardNavigation) {\n    computedActiveCell = undefined;\n  }\n\n  var setActiveCell = (0, _react.useCallback)(function (activeCell, queue) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps || !computedProps.computedCellNavigationEnabled) {\n      return;\n    }\n\n    var computedActiveCell = computedProps.computedActiveCell,\n        data = computedProps.data,\n        visibleColumns = computedProps.visibleColumns;\n    var shouldCommit = !queue;\n    queue = queue || (0, _batchUpdate.default)();\n\n    if (activeCell) {\n      var _activeCell = activeCell,\n          _activeCell2 = (0, _slicedToArray2.default)(_activeCell, 2),\n          activeCellRowIndex = _activeCell2[0],\n          activeCellColumnIndex = _activeCell2[1];\n\n      activeCellRowIndex = (0, _clamp.default)(activeCellRowIndex, 0, data.length - 1);\n      activeCellColumnIndex = (0, _clamp.default)(activeCellColumnIndex, 0, visibleColumns.length - 1);\n      var col = computedProps.getColumnBy(activeCellColumnIndex);\n\n      if (col && col.cellSelectable === false) {\n        return;\n      }\n\n      if (!data || data.__group || activeCellRowIndex == null || activeCellColumnIndex == null) {\n        queue(function () {\n          doSetActiveCell(null);\n          computedProps.setLastCellInRange('');\n        });\n\n        if (shouldCommit) {\n          queue.commit();\n        }\n\n        return;\n      }\n\n      activeCell = [activeCellRowIndex, activeCellColumnIndex];\n\n      if (activeCell === computedActiveCell || computedActiveCell && activeCell && computedActiveCell[0] === activeCell[0] && computedActiveCell[1] === activeCell[1]) {\n        return;\n      }\n    }\n\n    queue(function () {\n      doSetActiveCell(activeCell);\n      computedProps.setLastCellInRange('');\n    });\n\n    if (shouldCommit) {\n      queue.commit();\n    }\n  }, []);\n  var oldActiveCell = (0, _usePrevious.default)(computedActiveCell, null);\n  (0, _react.useLayoutEffect)(function () {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    if (oldActiveCell !== computedActiveCell && computedActiveCell) {\n      var _computedActiveCell = computedActiveCell,\n          _computedActiveCell2 = (0, _slicedToArray2.default)(_computedActiveCell, 2),\n          rowIndex = _computedActiveCell2[0],\n          columnIndex = _computedActiveCell2[1];\n\n      if (rowIndex == null || columnIndex == null) {\n        return;\n      }\n\n      var top = !oldActiveCell || rowIndex < oldActiveCell[0];\n      var right = !oldActiveCell || columnIndex > oldActiveCell[1];\n      var scrollToColumnIndex = (0, _clamp.default)(columnIndex + (right ? 0 : -0), 0, computedProps.visibleColumns.length - 1);\n      computedProps.scrollToCell({\n        rowIndex: rowIndex,\n        columnIndex: scrollToColumnIndex\n      }, {\n        top: top,\n        right: right\n      });\n    }\n  }, [computedActiveCell, oldActiveCell]);\n  var getCellSelectionBetween = (0, _react.useCallback)(function (start, end) {\n    var computedProps = computedPropsRef.current;\n\n    if (!start || !end || !computedProps) {\n      return {};\n    }\n\n    var startRow = Math.min(start[0], end[0]);\n    var startCol = Math.min(start[1], end[1]);\n    var endRow = Math.max(start[0], end[0]);\n    var endCol = Math.max(start[1], end[1]);\n    var range = {};\n    var groupBy = computedProps.computedGroupBy;\n    var dataSource = groupBy ? computedProps.data : [];\n    var current;\n\n    for (var row = startRow; row <= endRow; row++) {\n      if (groupBy) {\n        current = dataSource[row];\n\n        if (!current) {\n          break;\n        }\n\n        if (current.__group) {\n          continue;\n        }\n      }\n\n      for (var col = startCol; col <= endCol; col++) {\n        range[getCellSelectionKey(row, col)] = true;\n      }\n    }\n\n    return range;\n  }, []);\n  var getCellSelectionKey = (0, _react.useCallback)(function (cellProps, col) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return -1;\n    }\n\n    var rowKey;\n    var colKey;\n\n    if (typeof cellProps === 'string') {\n      return cellProps;\n    }\n\n    if (typeof cellProps === 'number' && typeof col === 'number') {\n      rowKey = cellProps;\n      colKey = col;\n    } else {\n      if (cellProps) {\n        rowKey = cellProps.rowIndex;\n        colKey = cellProps.columnIndex;\n      }\n    }\n\n    if (!computedProps.cellSelectionByIndex) {\n      return computedProps.getCellSelectionIdKey(rowKey, colKey);\n    }\n\n    return \"\".concat([rowKey, colKey]);\n  }, [computedPropsRef, props.columns]);\n  var getCellSelectionIdKey = (0, _react.useCallback)(function (rowIndex, columnIndex) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return -1;\n    }\n\n    var col = computedProps.getColumnBy(columnIndex);\n\n    if (!col) {\n      return -1;\n    }\n\n    var colId = col.id || col.name;\n    var item = computedProps.getItemAt(rowIndex);\n\n    if (!item) {\n      return '';\n    }\n\n    var rowId = computedProps.getItemId(item);\n    return \"\".concat([rowId, colId]);\n  }, []);\n  var incrementActiveCell = (0, _react.useCallback)(function (direction) {\n    var computedProps = computedPropsRef.current;\n\n    if (!computedProps) {\n      return;\n    }\n\n    var computedActiveCell = computedProps.computedActiveCell;\n\n    if (!computedActiveCell) {\n      computedActiveCell = [0, 0];\n    }\n\n    var _direction = (0, _slicedToArray2.default)(direction, 2),\n        row = _direction[0],\n        col = _direction[1];\n\n    var data = computedProps.data,\n        visibleColumns = computedProps.visibleColumns,\n        computedGroupBy = computedProps.computedGroupBy,\n        groupColumn = computedProps.groupColumn;\n    var maxRow = data.length - 1;\n    var columns = visibleColumns;\n    var maxCol = columns.length - 1;\n    var groupBy = computedGroupBy;\n    var minCol = groupBy && !groupColumn ? groupBy.length : 0;\n    var rowIndex = computedActiveCell[0];\n    var colIndex = computedActiveCell[1];\n\n    if (row) {\n      var rowSign = row < 0 ? -1 : 1;\n      var rowAdd = row;\n\n      while (data[rowIndex + rowAdd] && data[rowIndex + rowAdd].__group) {\n        rowIndex += rowAdd;\n        rowAdd = rowSign;\n      }\n\n      rowIndex += rowAdd;\n    }\n\n    if (col) {\n      var colSign = col < 0 ? -1 : 1;\n      var colAdd = col;\n\n      while (columns[colIndex + colAdd] && columns[colIndex + colAdd].cellSelectable === false) {\n        colIndex += colSign;\n        colAdd = colSign;\n      }\n\n      colIndex += colAdd;\n    }\n\n    rowIndex = (0, _clamp.default)(rowIndex, 0, maxRow);\n    colIndex = (0, _clamp.default)(colIndex, minCol, maxCol);\n    computedProps.setActiveCell([rowIndex, colIndex]);\n  }, []);\n  return {\n    getCellSelectionBetween: getCellSelectionBetween,\n    getCellSelectionIdKey: getCellSelectionIdKey,\n    computedActiveCell: computedActiveCell,\n    setActiveCell: setActiveCell,\n    getCellSelectionKey: getCellSelectionKey,\n    incrementActiveCell: incrementActiveCell\n  };\n};\n\nvar _default = useActiveCell;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}