{"ast":null,"code":"/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar getCol = function getCol(name, columnsMap) {\n  var col = columnsMap[name];\n\n  if (!col) {\n    Object.keys(columnsMap).forEach(function (colId) {\n      if (col) {\n        return;\n      }\n\n      var theCol = columnsMap[colId];\n\n      if (theCol.sortName === name) {\n        col = theCol;\n      }\n    });\n  }\n\n  return col;\n};\n\nvar getSortInfoForColumns = function getSortInfoForColumns(sortInfo, columnsMap) {\n  if (!columnsMap) {\n    return sortInfo;\n  }\n\n  if (!Array.isArray(sortInfo)) {\n    if (sortInfo && sortInfo.name) {\n      var col = getCol(sortInfo.name, columnsMap);\n      sortInfo = _objectSpread({}, sortInfo);\n\n      if (col) {\n        if (typeof col.sortName === 'string') {\n          sortInfo.name = col.sortName;\n        }\n\n        if (col.type) {\n          sortInfo.type = col.type;\n        }\n\n        if (col.sort) {\n          sortInfo.fn = function (one, two, data1, data2, sortInfo) {\n            return col.sort ? col.sort(one, two, col, data1, data2, sortInfo) : 0;\n          };\n        }\n      }\n    }\n\n    return sortInfo;\n  } else {\n    return sortInfo.map(function (sortInfo) {\n      var col = getCol(sortInfo.name, columnsMap);\n      sortInfo = _objectSpread({}, sortInfo);\n\n      if (col && typeof col.sortName === 'string') {\n        sortInfo.name = col.sortName;\n      }\n\n      if (col.type) {\n        sortInfo.type = col.type;\n      }\n\n      if (col.sort) {\n        sortInfo.fn = function (one, two, data1, data2, sortInfo) {\n          return col.sort ? col.sort(one, two, col, data1, data2, sortInfo) : 0;\n        };\n      }\n\n      return sortInfo;\n    });\n  }\n};\n\nvar _default = getSortInfoForColumns;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kathiavargas/node_modules/@inovua/reactdatagrid-community/hooks/useDataSource/getSortInfoForColumns.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_defineProperty2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","getCol","name","columnsMap","col","colId","theCol","sortName","getSortInfoForColumns","sortInfo","Array","isArray","type","sort","fn","one","two","data1","data2","map","_default"],"mappings":"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","sourcesContent":["/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar getCol = function getCol(name, columnsMap) {\n  var col = columnsMap[name];\n\n  if (!col) {\n    Object.keys(columnsMap).forEach(function (colId) {\n      if (col) {\n        return;\n      }\n\n      var theCol = columnsMap[colId];\n\n      if (theCol.sortName === name) {\n        col = theCol;\n      }\n    });\n  }\n\n  return col;\n};\n\nvar getSortInfoForColumns = function getSortInfoForColumns(sortInfo, columnsMap) {\n  if (!columnsMap) {\n    return sortInfo;\n  }\n\n  if (!Array.isArray(sortInfo)) {\n    if (sortInfo && sortInfo.name) {\n      var col = getCol(sortInfo.name, columnsMap);\n      sortInfo = _objectSpread({}, sortInfo);\n\n      if (col) {\n        if (typeof col.sortName === 'string') {\n          sortInfo.name = col.sortName;\n        }\n\n        if (col.type) {\n          sortInfo.type = col.type;\n        }\n\n        if (col.sort) {\n          sortInfo.fn = function (one, two, data1, data2, sortInfo) {\n            return col.sort ? col.sort(one, two, col, data1, data2, sortInfo) : 0;\n          };\n        }\n      }\n    }\n\n    return sortInfo;\n  } else {\n    return sortInfo.map(function (sortInfo) {\n      var col = getCol(sortInfo.name, columnsMap);\n      sortInfo = _objectSpread({}, sortInfo);\n\n      if (col && typeof col.sortName === 'string') {\n        sortInfo.name = col.sortName;\n      }\n\n      if (col.type) {\n        sortInfo.type = col.type;\n      }\n\n      if (col.sort) {\n        sortInfo.fn = function (one, two, data1, data2, sortInfo) {\n          return col.sort ? col.sort(one, two, col, data1, data2, sortInfo) : 0;\n        };\n      }\n\n      return sortInfo;\n    });\n  }\n};\n\nvar _default = getSortInfoForColumns;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}