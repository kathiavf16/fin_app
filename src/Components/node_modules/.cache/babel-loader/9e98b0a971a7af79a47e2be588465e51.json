{"ast":null,"code":"var _jsxFileName = \"/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/GeoChart.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n/**\n * Component that renders a map of Germany.\n */\n\nfunction GeoChart({\n  data,\n  property\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedState, setSelectedState] = useState(23); // will be called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#ccc\", \"red\"]); // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect(); // projects geo-coordinates on a 2D plane\n\n    const projection = geoAlbersUsa().fitSize([width, height], selectedState || data).precision(100); // takes geojson data,\n    // transforms that into the d attribute of a path element\n\n    const pathGenerator = geoPath().projection(projection); // render each country\n\n    svg.selectAll(\".state\").data(data.features).join(\"path\").on(\"click\", feature => {\n      setSelectedState(selectedState === feature ? null : feature);\n    }).attr(\"class\", \"state\").attr(\"d\", feature => pathGenerator(feature)).style('cursor', 'pointer').attr('fill', d => {\n      return d.STATE === \"26\" ? '#CC442F' : '#6eabcc';\n    }).attr('opacity', d => {\n      return d.STATE === \"26\" ? 1 : .7;\n    }).transition().attr(\"fill\", feature => colorScale(feature.properties[property])); // render text\n\n    svg.selectAll(\".label\").data([selectedState]).join(\"text\").attr(\"class\", \"label\").attr(\"x\", 10).attr(\"y\", 25);\n  }, [data, dimensions, property, selectedState]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default GeoChart;","map":{"version":3,"sources":["/Users/kathiavargas/Desktop/dataStudio/my_app/src/Components/GeoChart.js"],"names":["React","useRef","useEffect","useState","select","geoPath","geoAlbersUsa","min","max","scaleLinear","useResizeObserver","GeoChart","data","property","svgRef","wrapperRef","dimensions","selectedState","setSelectedState","svg","current","minProp","features","feature","properties","maxProp","colorScale","domain","range","width","height","getBoundingClientRect","projection","fitSize","precision","pathGenerator","selectAll","join","on","attr","style","d","STATE","transition","marginBottom"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\n/**\n * Component that renders a map of Germany.\n */\n\nfunction GeoChart({ data, property }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedState, setSelectedState] = useState(23);\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear()\n      .domain([minProp, maxProp])\n      .range([\"#ccc\", \"red\"]);\n    // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // projects geo-coordinates on a 2D plane\n    const projection = geoAlbersUsa()\n      .fitSize([width, height], selectedState || data)\n      .precision(100);\n\n    // takes geojson data,\n    // transforms that into the d attribute of a path element\n    const pathGenerator = geoPath().projection(projection);\n\n    // render each country\n    svg\n      .selectAll(\".state\")\n      .data(data.features)\n      .join(\"path\")\n      .on(\"click\", feature => {\n        setSelectedState(selectedState === feature ? null : feature);\n      })\n      .attr(\"class\", \"state\")\n      .attr(\"d\", feature => pathGenerator(feature))\n      .style('cursor', 'pointer')\n      .attr('fill', d => {return (d.STATE === \"26\") ? '#CC442F' : '#6eabcc'})\n      .attr('opacity', d => {return (d.STATE === \"26\") ? 1 : .7})\n      .transition()\n      .attr(\"fill\", feature => colorScale(feature.properties[property]));\n\n\n    // render text\n    svg\n      .selectAll(\".label\")\n      .data([selectedState])\n      .join(\"text\")\n      .attr(\"class\", \"label\")\n      .attr(\"x\", 10)\n      .attr(\"y\", 25);\n  }, [data, dimensions, property, selectedState]);\n\n  return (\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n\nexport default GeoChart;\n"]},"metadata":{},"sourceType":"module"}