{"ast":null,"code":"/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction hightlightText(_ref) {\n  var queryText = _ref.queryText,\n      text = _ref.text,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'contains' : _ref$mode;\n  var regex = mode === 'contains' ? new RegExp(queryText, 'gi') : new RegExp(\"^\".concat(queryText), 'gi');\n  var matchText = [];\n  var searchQueryLen = queryText.length;\n  var localMatch;\n  var previousLocalMatch;\n\n  while ((localMatch = regex.exec(text)) !== null) {\n    var index = localMatch.index;\n    var previousSegmentIndex = previousLocalMatch ? previousLocalMatch.index + searchQueryLen : 0;\n    matchText.push(text.slice(previousSegmentIndex, index));\n    matchText.push({\n      match: text.slice(localMatch.index, localMatch.index + searchQueryLen)\n    });\n    previousLocalMatch = localMatch;\n  }\n\n  matchText.push(text.slice(previousLocalMatch.index + searchQueryLen));\n  matchText = matchText.filter(function (match) {\n    return match;\n  });\n  return matchText;\n}\n\nvar _default = hightlightText;\nexports.default = _default;","map":{"version":3,"sources":["/Users/kathiavargas/node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/hightlightText.js"],"names":["Object","defineProperty","exports","value","default","hightlightText","_ref","queryText","text","_ref$mode","mode","regex","RegExp","concat","matchText","searchQueryLen","length","localMatch","previousLocalMatch","exec","index","previousSegmentIndex","push","slice","match","filter","_default"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,MAAIC,SAAS,GAAGD,IAAI,CAACC,SAArB;AAAA,MACIC,IAAI,GAAGF,IAAI,CAACE,IADhB;AAAA,MAEIC,SAAS,GAAGH,IAAI,CAACI,IAFrB;AAAA,MAGIA,IAAI,GAAGD,SAAS,KAAK,KAAK,CAAnB,GAAuB,UAAvB,GAAoCA,SAH/C;AAIA,MAAIE,KAAK,GAAGD,IAAI,KAAK,UAAT,GAAsB,IAAIE,MAAJ,CAAWL,SAAX,EAAsB,IAAtB,CAAtB,GAAoD,IAAIK,MAAJ,CAAW,IAAIC,MAAJ,CAAWN,SAAX,CAAX,EAAkC,IAAlC,CAAhE;AACA,MAAIO,SAAS,GAAG,EAAhB;AACA,MAAIC,cAAc,GAAGR,SAAS,CAACS,MAA/B;AACA,MAAIC,UAAJ;AACA,MAAIC,kBAAJ;;AAEA,SAAO,CAACD,UAAU,GAAGN,KAAK,CAACQ,IAAN,CAAWX,IAAX,CAAd,MAAoC,IAA3C,EAAiD;AAC/C,QAAIY,KAAK,GAAGH,UAAU,CAACG,KAAvB;AACA,QAAIC,oBAAoB,GAAGH,kBAAkB,GAAGA,kBAAkB,CAACE,KAAnB,GAA2BL,cAA9B,GAA+C,CAA5F;AACAD,IAAAA,SAAS,CAACQ,IAAV,CAAed,IAAI,CAACe,KAAL,CAAWF,oBAAX,EAAiCD,KAAjC,CAAf;AACAN,IAAAA,SAAS,CAACQ,IAAV,CAAe;AACbE,MAAAA,KAAK,EAAEhB,IAAI,CAACe,KAAL,CAAWN,UAAU,CAACG,KAAtB,EAA6BH,UAAU,CAACG,KAAX,GAAmBL,cAAhD;AADM,KAAf;AAGAG,IAAAA,kBAAkB,GAAGD,UAArB;AACD;;AAEDH,EAAAA,SAAS,CAACQ,IAAV,CAAed,IAAI,CAACe,KAAL,CAAWL,kBAAkB,CAACE,KAAnB,GAA2BL,cAAtC,CAAf;AACAD,EAAAA,SAAS,GAAGA,SAAS,CAACW,MAAV,CAAiB,UAAUD,KAAV,EAAiB;AAC5C,WAAOA,KAAP;AACD,GAFW,CAAZ;AAGA,SAAOV,SAAP;AACD;;AAED,IAAIY,QAAQ,GAAGrB,cAAf;AACAH,OAAO,CAACE,OAAR,GAAkBsB,QAAlB","sourcesContent":["/** \n * Copyright (c) INOVUA SOFTWARE TECHNOLOGIES.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction hightlightText(_ref) {\n  var queryText = _ref.queryText,\n      text = _ref.text,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'contains' : _ref$mode;\n  var regex = mode === 'contains' ? new RegExp(queryText, 'gi') : new RegExp(\"^\".concat(queryText), 'gi');\n  var matchText = [];\n  var searchQueryLen = queryText.length;\n  var localMatch;\n  var previousLocalMatch;\n\n  while ((localMatch = regex.exec(text)) !== null) {\n    var index = localMatch.index;\n    var previousSegmentIndex = previousLocalMatch ? previousLocalMatch.index + searchQueryLen : 0;\n    matchText.push(text.slice(previousSegmentIndex, index));\n    matchText.push({\n      match: text.slice(localMatch.index, localMatch.index + searchQueryLen)\n    });\n    previousLocalMatch = localMatch;\n  }\n\n  matchText.push(text.slice(previousLocalMatch.index + searchQueryLen));\n  matchText = matchText.filter(function (match) {\n    return match;\n  });\n  return matchText;\n}\n\nvar _default = hightlightText;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}